:toc:
:toclevels: 4

== HTML5 and its New APIs

This chapter is a brief review of selected HTML5 APIs. But what is HTML5? To put it simple, it's an umbrella name for a combination of HTML, JavaScript, CSS, and several new APIs that appeared during the last several years. Five years ago people were using the term _Web 2.0_ to define modern looking applications. These days HTML5 is almost a household name, and we'll go along with it. But let's just remember that it's about the same old development in JavaScript plus latest advances in HTML and CSS.

This chapter differs from all others because it includes less code, and is more of an overview of selected APIs that are included in HTML5 specification, namely Web Storage, WebSQL, WebSockets, Web Workers, and History API. 

NOTE: To understand code samples included in this chapter you have to be familiar with JavaScript and some monitoring tools like Chrome Developers Tool. Consider reading Chapter 2 first if you're new to Web development.

The majority of the modern Web browsers already support the current version of http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#workers[HTML5 specification], which will become a W3C standard in 2014. The question is if the users of your Web application can use a modern browser installed on their device? There are two groups of users that will stick to the outdated browsers for some time:

1.  Computer illiterate people who are afraid of installing any new software one their PCs, especially, people of the older generation. _"John, after the last visit of our grandson our computer works even slower than before. Please don't let him install these new fancy browsers here. I just need my old Internet Explorer, access to Hotmail and Facebook"._

2.  Business users working for large corporations, where all the installations of the software on their PCs is done by a dedicated technical support team. They say, _"We have 50000 PCs in or firm. An upgrade from Internet Explorer version 8 to version 9 is a major undertaking. Internal users work with hundreds Web applications on a regular basis. They can install whatever browser they want, but if some of these applications won't work as expected, the users will flood us with support requests we're not qualified to resolve_ . Hence the strategy of using the lowest denominator browser often wins.

In the worst case scenario, Web developers need to make both of the above  groups of users happy. Take an online banking - an old couple has to be able to use your Web application from their old PCs otherwise they can transfer their lifetime savings to a different bank which doesn't require the later version of Firefox for online banking.

Does it mean that enterprise Web developers shouldn't even bother using HTML5 that's not 100% supported? Not at all. This means that a substantial portion of their application's code will be bloated with if-statements figuring out what this specific Web browser supports and providing several solutions that keep your application on float in any Web browser. This what makes the job of DHTML developers a lot more difficult than of, say Java developers who know exactly the VM where their code will work. If you don't install the JavaRuntime of version 1.6 our application won't work. As simple as that. How about asking Java developers writing applications that will work in any runtime released during the last 10 years? No, we're not that nasty.

Do you believe it would be a good idea for Amazon or Facebook to re-write their UI in Java? Of course not unless they want to loose most of their customers who will be scared to death after seeing the message
of the 20-step Java installer asking for the access to the internals of their computer. Each author of this book is a Java developer, and we love using Java, but on the server side. But when it comes to the consumer facing Web applications there are better than Java choices.

So what's the bottom line? We have to learn how to develop Web applications that won't require installing any new software on the user's machines. In the Web browsers it's DHTML or in the modern terminology it's HTML5 stack.

In the unfortunate event of needing to support both new and old HTML and CSS implementations you can use http://html5boilerplate.com/[HTML5 Boilerplate] that is not a framework, but a template for creating a new
HTML project that will support HTML5 and CSS3 elements but will work even in the hostile environments of the older browsers. It's like broadcasting a TV show in HD, but letting the cavemen with the 50-year old black-and-white tubes watching it too.

HTML Boilerplate comes with a simple way to start your project pre-packaged with solutions and workarounds offered by well known gurus in the industry. Make no mistake, your code base may be larger that you wanted - for example, the initial CSS starts with 500 lines accommodating the old and new browsers, but it may be your safety net.

TIP: Watch
http://net.tutsplus.com/tutorials/html-css-techniques/the-official-guide-to-html5-boilerplate/[this
screencast by Paul Irish], a co-creator of HTML5 Boilerplate. You can also read the current version of the
https://github.com/h5bp/html5-boilerplate/blob/v4.0.0/doc/usage.md[Getting started with HTML5 Boilerplate] on Github.


=== Selected HTML5 APIs

This chapter is about selected HTML APIs that we find important to understand in Web applications. But before using any of the API's listed here you want to check if the versions of the Web browsers you have to user support these APIs. The Web site http://caniuse.com[http://caniuse.com] will give you the up-to-date information about all major browsers and their versions that do (or don't) support the API in question. For example, to see which browsers support Worker API visit http://caniuse.com/#search=Worker[caniuse.com].  

It's a good practice to include in your code a line that test it an API is supported. For example, if the following if-statement returns false, the Web Worker is not supported and the code should fallback to a single-threaded processing mode:

[source, javascript]
----
if (window.Worker) {
   // create a Worker instance to execute your 
   // script in a separate thread
) else{
	// tough luck, fallback to a singleâ€“threaded mode
}
----

In Chapter 3 you'll learn about the feature-detection tool _Modernizr_ that allows to programmatically check if any particular HTML5 API is supported by the browser being used.

[source, javascript]
----
if (Modernizr.Worker) {
   // create a Worker instance to execute your 
   // script in a separate thread
)
----

==== HTML5 Web Messaging

http://www.w3.org/TR/webmessaging/[HTML5 Web Messaging] allows you to arrange for communication between different Web pages of the same Web application. More officially, it's about "communicating between browsing contexts in HTML documents". Web messaging also allows you to work around _the same domain policy_ that would result in security error if a window A has one origin (the combination of URL scheme, host name and port, e.g. http://myserver.com:8080) would try to access property of a window B that was downloaded from another origin. But with messaging API windows downloaded from different origins can send messages to each other.

The API is pretty straightforward: if a script in `WindowA` has a reference to `WindowB` where you want to send a message, invoke the following method:

[source, javascript]
----
 myWindowB.postMesage(someData, targetOrigin);
----

The object referenced by `myWindowB` will receive an event object with the content of payload `someData` in the event's property `data`.  The `targetOrigin` specifies the origin where `myWindowB` was downloaded from. Specifying a concrete URI of the destination window in `targetOrigin` is the right way to do messaging. This way if a malicious site will try to intercept the message it won't be delivered since the URI specified in `targetOrigin` would be different from the malicious site's URI. But if you're absolutely sure that your application is operating in absolutely safe environment, you can specify `"*"` as `targetOrigin`.

Accordingly, `myWindowB` has to define an event handler for processing of this external event `message`, for example:

[source, javascript]
----
window.addEventListener('message', myEventHanler, false);

function myEventHandler(event){
	console.log(`Received something: ` + event.data);
}
----

//The window-receiver can reject messages from untrusted origins. The event's property `origin` contains the scheme, host name and the port of the message sender (not the full URI). A simple statement like `if event.origin == 'http://mytrusteddomain:8080'` will ensure that only the messages arrived from the trusted origin are processed.

Let's consider an example where an HTML Window creates an iFrame and needs to communicate with it. In particular, the iFrame will notify the main window that it has loaded, and the main window will acknowledge receiving of this message.  

The iFrame will have two button emulating the case of some trading system with two buttons: Buy and Sell. When the use clicks on one of these iFrame's buttons the main window has to confirm receiving of the buy or sell request. <<FIG1-1>> is a snapshot from a Chrome browser where Developers Tools panel
 shows the output on the console after the iFrame was loaded and the user clicked on the Buy and Sell buttons.

[[FIG1-1]]
.Message exchange between the window and iFrame
image::images/fig_01_01.png[]

The source code of this example is shown next. It's just two HTML files: mainWindow.html and myFrame.html. Here's the code of mainWindow.html

[source, html]
----
<!DOCTYPE html>
<html lang="en">

<head>
    <title>The main Window</title>
</head>

<body bgcolor="cyan">

    <h1>This is Main Window </h1>

    <iframe id="myFrame">                   
        <p>....</p>
    </iframe>
  
   <script type="text/javascript">
        var theiFrame;
        
        function handleMessage(event) {            // <1>
                console.log('Main Window got the message ' +
                                     event.data );
                
             // Reply to the frame here
             switch (event.data) {                // <2> 
                	
                case 'loaded':
                   theiFrame.contentWindow.postMessage("Hello my frame! Glad you loaded! ", 
                                    event.origin);  // <3>
                   break;
                case 'buy':
                   theiFrame.contentWindow.postMessage("Main Window confirms the buy request ",  
                               event.origin);
                   break;
                case 'sell':
                   theiFrame.contentWindow.postMessage("Main Window confirms the sell request. ",  
                               event.origin);
                   break;       
             } 
        }
        
        window.onload = function() {                  //  <4>
            window.addEventListener('message', handleMessage, false);
            theiFrame = document.getElementById('myFrame');
            theiFrame.src = "myFrame.html";		
        }

   </script>

 </body>
</html>
----

<1> This function is an event handler for messages received from the iFrame window. The main window is the parent of iFrame, and whenever the latter will invoke `parent.postMessage()` this even handler will be engaged.

<2> Depending on the content of the message payload (`event.data`)	respond back to the sender with acknowledgment.  If the payload is `loaded`, this means that the iFrame has finished loading. If it's `buy` or `sell` - this means that the corresponding button in the iFrame has been clicked. As an additional precaution, you can ensure that `event.origin` has the expected URI before even starting processing received events.

<3> While this code shows how a window sends a message to an iPrame, you can send messages to any other windows as long as you have a reference to it. For example:
+

[source, javascript]
----
  var myPopupWindow = window.open(...);
  myPopupWindow.postMessage("Hello Popup", "*");
----
+
<4>	On load the main window starts listening to the messages from other windows and loads the content of the iFrame. 

TIP: To implement error processing add a handler for the `window.onerror` property. 

The code of the myFrame.html comes next. This frame contains two buttons Buy and Sell, but there is no business logic to buy or sell anything. The role of these buttons is just to deliver the message to the creator of thie iFrame that it's time to buy or sell.

[source, html]
----
<!DOCTYPE html>
<html lang="en">
	
 <body bgcolor="white">

    <h2> This is My Frame Window </h2>
    
    <button type="buy" onclick="sendToParent('buy')">Buy</button> 
    <button type="sell" onclick="sendToParent('sell')">Sell</button> 
  
  <script type="text/javascript">
        
        var senderOrigin = null;
        
        function handleMessageInFrame(event) {
                console.log('   My Frame got the message from ' + event.origin +": " + event.data);
                if (senderOrigin == null) senderOrigin = event.origin; // <1>
        }

        window.onload = function(){                    
        	window.addEventListener('message', handleMessageInFrame, false);
            parent.postMessage('loaded', "*");  // <2>
        };
        
        function sendToParent(action){
        	parent.postMessage(action,  senderOrigin);        // <3>
        }

    </script>
 </body>
</html>
----

<1> When the iFrame receives the first message from the parent, store the reference to the sender's origin.

<2> Notify the parent that the iFrame is loaded. The target origin is specified as `"*"` here as an illustration of how to send messages without worrying about malicious sites-interceptors - always specify the target URI as it's done in the function `sendToParent()`.

<3> Send the message to parent window when the user clicks on Buy or Sell button.

If you'll need to build a UI of the application from reusable components, applying messaging techniques allows you to create loosely coupled components. Say you've created a window for a financial trader. This windows get the data push from the server showing the latest stock prices. When the trader likes the price he may click on the Buy or Sell button to initiate a trade. The trading engine can be is implemented in a separate  window and establishing inter-window communications in a loosely coupled manner is really important. 

Three years ago O'Reilly has published another book written by us. That book was titled "Enterprise Development with Flex", and in particular, we've described there how to apply the Mediator design pattern for creating a UI where components can communication with each other by sending-receiving events from the mediator object.  The Mediator pattern remains very important in developing UI using any technologies or programming languages, and importance of the HTML5 messaging can't be underestimated. 

<<FIG1-2>> is an illustration from that Enterprise Flex book. The Pricing Panel on the left gets the data feed about the current prices of the IBM stock. When the user clicks on Bid or Ask panel, the Pricing Panel just sends the event with the relevant information like JSON-formatted string containing the stock symbol, price, buy or sell flag, date, etc. In HTML5 realm, we can say that the Pricing Panel invokes `parent.postMessage()` and shoots the message to the mediator (a.k.a. main window).    

[[FIG1-2]]
.Before and after the trader clicked on the Price Panel
image::images/fig_01_02.png[]

The Mediator receives the message and re-post it to its another child - the Order Panel that knows how to place orders to purchase stocks. The main takeaway from such design is that the Pricing and Order panels do not know about each other and are communication by sending-receiving messages to/from a mediator. Such a loosely coupled design allows reuse the same code in different applications. For example, the Pricing Panel can be reused in some portal that's used by a company executives in a dashboard showing prices without the need to place orders. Since the Price Panel has no string attached to Order Panel, it's easy to reuse the existing code in such a dashboard.

.HTML5 Forms
*********
While this chapter is about selected HTML APIs, we've decided to bring your attention to the improvements in the HTML5 `<form>` tag too.

It's hard to imagine an enterprise Web application that is not using forms. At the very minimum the Contact Us form has to be there. A login view is yet another example of the HTML form that almost every enterprise application needs. People fill out billing and shipping forms, they answer long questionnaires while purchasing insurance policies online. HTML5 includes some very useful additions that simplify working with forms. 

We'll start with the prompts. Showing the hints or prompts right inside the input field will save you some screen space. HTML5 has a special attribute `placeholder`. The text placed in this attribute will be shown inside the field until it gets the focus - then the text disappears. You'll see the use of placeholder attribute in Chapter 3 in the logging part of our sample application.

[source, html]
----
<input id="username" name="username" type="text" 
                      placeholder="username" autofocus/>

<input id="password" name="password" 
          type="password" placeholder="password"/>
----

Another useful attribute is `autofocus`, which automatically places the focus in the field with this attribute. In the above HTML snippet the focus will be automatically placed in the field `username`.

HTML5 introduces a number of new input types, and many of them have huge impact on the look and feel of the UI on mobile devices. Below are brief explanations.

If the input type is `date`, in mobile devices it'll show native looking date pickers when the focus gets into this field. In desktop computers you'll see a little stepper icon to allow the user select the next or previous month, day, or year without typing. Besides `date` you can also specify such types as `datetime`, `week`, `month`, `time`, `datetime-local`.  

If the input type is `email`, the main view of the virtual keyboard on your smartphone will include the _@_ key. 

If the input type is `url`, the main virtual keyboard will include the buttons _.com_, _._, and _/_. 

The `tel` type will automatically validate telephone numbers for the right format.

The `color` type opens up a color picker control to select the color. After selection, the hexadecimal representation of the color becomes the `value` of this input field. 

The input type `range` shows a slider, and you can specify its `min` and `max` values.

The `number` type shows a numeric stepper icon on the right side of the input field.

If the type is `search`, at the very minimum you'll see a little cross on the right of this input field. It allows the user quickly clear the field. On mobile devices, bringing the focus to the search field brings up a virtual keyboard with the Search button. Consider adding the attributes `placeholder` and `autofocus` to the search field. 

If the browser doesn't support new input type, it'll render it as a text field.

To validate the input values, use the `required` attribute. It doesn't include any logic, but won't allow submitting the form until the input field marked as `required` has something in it. 

The `pattern` attribute allows you to write a regular expression that ensures that the field contains certain symbols or words. For example, adding `pattern="http:.+"` won't consider the input data valid, unless it starts with `http://` followed by one or more characters, one of which has to be period. It's a good idea to include a `pattern` attribute with a regular expression most of the input fields. 
*********

==== Web Workers

When you start a Web Browser or any other application on your computer or other device, you start _a task_ or _a process_. _A thread_ is a lighter process within another process. While JavaScript doesn't support multi-threaded mode, HTML5 has a way to run a script as a separate thread in background. 

A typical Web application has a UI part (HTML) and a processing part (JavaScript). If a user clicks on a button, which starts a JavaScript function that runs, say for a hundred mili-seconds, there won't be any noticeable delays in user interaction. But if the JavaScript will run a couple of seconds, user experience will suffer. In some cases the Web browser will assume that the script became _unresponsive_ and will offer the user to kill it. 

Imagine an HTML5 game where a click on the button has to do some major recalculation of coordinates and repainting of multiple images in the browser's window. Ideally, we'd like to parallelize the execution of UI interactions and background JavaScript functions as much as possible, so the user won't notice any delays.  Another example is a CPU-intensive spell checker function that find errors while the user keeps typing. Parsing JSON object is yet another candidate to be done in background. Polling a server for some data is yet another use case where Web workers fit well. 

In other words, use Web workers when you want to be able to run multiple parallel _threads of execution_ within the same task. 
On a multi-processor computer parallel threads can run on different CPUâ€™s.On a single-processor computer, threads will take turn in getting _slices_ of CPU's time. Since switching CPU cycles between threads happens fast, the user wonâ€™t notice tiny delays in each threadâ€™s execution getting a feeling of smooth interaction.

===== Creating and Communicating with Workers

HTML5 offers http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#workers[a solution] for multi-threaded execution of a script with the help of the `Worker` object. To start a separate thread of execution you'll need to create an instance of a `Worker` object passing it the name of the file with the script to run in a separate thread, for example:

[source, javascript]
----
var mySpellChecker = new Worker(spellChecker.js);
---- 

The `Worker` thread runs asynchronously and can't directly communicate with the UI components (i.e. DOM elements) of the browser. When the `Worker`s script finishes execution, it can send back a message using the `postMessage()` method. Accordingly, the script that created the worker thread can listen for the event from the worker and process its responses in the event handler. Such event object will contain the data received from the worker in its property `data`, for example: 

[source, javascript]
----
var mySpellChecker = new Worker(spellChecker.js);
    mySpellChecker.onmessage = function(event){
        
        // processing the worker's response 
        document.getElementById('myEditorArea').textContent = event.data;
    };
---- 

You can use an alternative and preferred JavaScript function `addEventListener()` to assign the message handler:

[source, javascript]
----
var mySpellChecker = new Worker(spellChecker.js);
    mySpellChecker.addEventListener("message", function(event){
        
        // processing the worker's response
        document.getElementById('myEditorArea').textContent = event.data;
    });
----  

On the other hand, the HTML page can also send any message to the worker forcing it to start performing its duties like start the spell checking process:

[source, javascript]
----
    mySpellChecker.postMessage(wordToCheckSpelling);
---- 

The argument of `postMessage()` can contain any object, and it's  being passed by value, not by reference.

Inside the worker you also need to define an event handler to process the data sent from outside. To continue the previous example the spellChecker.js will have inside the code that receives the text to check, performs the spell check, and returns the result back:

[source, javascript]
----
self.onmesage = function(event){
     
     // The code that performs spell check goes here
	 
	 var resultOfSpellCheck = checkSpelling(event.data);
     
     // Send the results back to the window that listens
     // for the messages from this spell checker

	 self.postMessage(resultOfSpellCheck);
};
----

If you want to run a certain code in the background repeatedly, you can create a wrapper function (e.g. `doSpellCheck()`) that internally invokes `postMesage()` and then gives such a wrapper to `setTimeout()` or `setInterval()`to run every second or so: `var timer = setTimout(doSpellCheck, 1000);`.

If an error occurs in a worker thread, your Web application will get a notification in a form of an event, and you need to provide a function handler for `onerror`:

[source, javascript]
----
mySpellChecker.onerror = function(event){
    // The error handling code goes here
};
----

===== Dedicated and Shared Workers

If a window's script creates a worker thread for its own use, we call it _a dedicated worker_.  A window creates an event listener, which gets the messages from the worker. On the other hand, the worker can have a listener too to react to the events received from its creator.   

A _shared worker_ thread can be used by several scripts as long as they have the same origin. For example, if you want to reuse a spell checker feature in several views of your Web application, you can create a shared worker as follows:

[source, javascript]
----
var mySpellChecker = new SharedWorker(spellChecker.js);
---- 

Another use case is funneling all requests from multiple windows to the server through a shared worker. You can also place into a shared worker a number of reusable utility function that may be needed in several windows - such architecture can reduce or eliminate repeatable code. 

One or more scripts can communicate with a shared worker, and it's done slightly different that with the dedicated one. Communication is done through the `port` property and the `start()` method has to be invoked to be able to use `postMessage()` first time:

[source, javascript]
----
var mySpellChecker = new SharedWorker(spellChecker.js);
    mySpellChecker.port.addEventListener("message", function(event){
        document.getElementById('myEditorArea').textContent = event.data;
    });
    mySpellChecker.port.start()
----

The event handler becomes connected to the `port` property, and now you can post the message to this shared worker using the same `postMessage()` method.

[source, javascript]
----
    mySpellChecker.postMessage(wordToCheckSpelling);
---- 

Each new script that will connect to the shared worker by attaching an event handler to the port results in incrementing the number of active connections that the shared worker maintains.  If the script of the shared worker will invoke `port.postMessage("Hello scripts!")`, all listeners that are connected to this port will get it. 

TIP: if a shared thread is interesting in processing the moments when a new script connects to it, add an event listener to the `connect` event in the code of the shared worker.

If a worker needs to stop communicating with the external world it can call `self.close()`. The external script can kill the worker thread by calling the method `terminate()`, for example:

[source, javascript]
----
mySpellChecker.terminate();
----

// TIP: Using JavaScript `apply()` you can pass the name of the method to call along with its arguments.

TIP: Since the script running inside the `Worker` thread doesn't have access to the browser's UI components, you can't debug such scripts by printing messages onto browser's console with `console.log()`. But the Chrome Browser includes the http://blog.chromium.org/2012/04/debugging-web-workers-with-chrome.html[_Workers_ panel] that can be used for debugging the code that's launched in worker threads. You'll see multiple examples of using Chrome Developers Tools starting from Chapter 2.   

To get a more detailed coverage of Web Workers, read the O'Reilly book by Ido Green titled "Web Workers".


=== WebSockets

Authors of this book believe that WebSocket API is so important, that we dedicated the entire chapter of this book to it. In this section we'll just introduce this API very briefly.

=== Offline Web Applications

The common misconception about Web applications is that they are useless if there is no connection to the Internet. Everyone knows that native application can be written in a way that they have everything they need installed on your device's data storage - both the application code and the data storage.  With HTML5, Web applications can be designed to be functional even when the user's device is disconnected. The offline version of a Web application may not offer full functionality, but certain functions can still be available. 

==== Prerequisites for developing Offline Web Applications 

To be useful in a disconnected mode, HTML-based application needs to have access to some local storage on the device, in which case the data entered by the user in the HTML windows can be saved locally with further synchronization with the server when connection becomes available. Think of a salesman of a pharmaceutical visiting medical offices trying to sell new pills. What if connection is not available at certain point? She can still use her tablet demonstrate the marketing materials and more importantly, collect some data about this visit and save them locally. When the Internet connection becomes  available again, the Web application should support automatic or manual data synchronization so the information about the salesman activity will be stored in a central database.

Having a local storage accessible from HTML/JavaScript UI is a prerequisite for building offline Web applications. The other important design decision is to ensure that the server sends to the client only the data, no HTML markup (see <<FIG1-3>>). So all these server-side frameworks that prepare the data heavily sprinkled with HTML markup should not be used. For example, the front-end should be developed in HTML/JavaScript/CSS, the back end in your favorite language (Java, .Net, PHP, etc.), and the JSON-formatted data are being sent from the server to the client and back.

[[FIG1-3]]
.A sample Design with Offline Use
image::images/fig_01_03.png[]

The business logic that supports the client's offline functionality should be developed in JavaScript and run in the Web browser. While most of the business logic of Web applications remains on the server side, the Web client is not as thin as it used to be in legacy HTML-based applications. The client becomes fatter and it can have state. 

==== Application Cache

The goal is to have your Web application running even if there is no Internet connection. The user will still go to her browser and enter the URL, but the trick is that the main and some other Web pages were saved locally in the application cache. So even if you're not online, the application will start. 

If your Web application consists of multiple files, you need to specify in _Cache Manifest_ those files that have to be present on the user's computer in the offline mode. Cache Manifest is a plain text file that lists such resources. Storing some resources in the application cache can be a good idea not only in the disconnected mode, but also to lower the amount of code that has to be downloaded from the server each time the user starts your application. Here's an example of the file mycache.manifest, which includes one CSS file, two JavaScript files, and one image to be stored locally on the user's computer:

[source, html]
----
CACHE MANIFEST
/resources/css/main.css
/js/app.js
/js/customer_form.js
/resources/images/header_image.png
----

The manifest file has to start with the line CACHE MANIFEST and can be optionally divided into sections. If there is no sections (as in our example) 

The landing page of your Web application has to specify an explicit reference to the location of the manifest. If the above file is located in the document root directory of your application, the main HTML file can refer to the manifest as follows: 

[source, html]
----
<!DOCTYPE html>
<html lang="en" manifest="/mycache.manifest">
  ...
</html>
----

The Web server must serve the manifest file with a MIME type "text/cache-manifest", and you need to refer to the documentation of your Web server to see how to see where to make a configuration change so all files with extension .manifest are served as "text/cache-manifest".



==== HTML5: Storing Data Locally 

In the past, Web browsers could only store their own cache and application's cookies on the user's computer. Cookies are small files (up to 4Kb) that a Web browser would automatically save locally if the server's `HTTPResponse` would include them. On the next visit of the same URL, the Web browser would send all non-expired cookies back to the browser as a part of `HTTPRequest` object. Cookies were used for arranging HTTP session management and couldn't be considered a solution for setting up a local storage. HTML5 offers a lot more advanced solutions for storing data locally, namely: 

* http://www.w3.org/TR/webstorage/[Web Storage] that includes Local Storage and Session Storage. 

* http://www.w3.org/TR/IndexedDB/[IndexedDB]: a NoSQL database that stores key-value pairs.

WARNING: http://www.w3.org/TR/webdatabase/[Web SQL Database], may still be used as the local database, but the work on this specification is stopped and future versions of the browser may not support it. 

At the time of this writing (Summer of 2013) local and session storage are supported by all modern Web browsers. Web SQL Database is not supported by Firefox and Internet Explorer and most likely will never be. IndexedDB is the Web storage format of the future, but Safari doesn't support it yet. Consider using a polyfill for indexedDB using Web SQL - it's called https://github.com/axemclion/IndexedDBShim[IndexedDBShim].

To get the current status visit caniuse.com and search for the API you're interested in.

IMPORTANT: While Web browsers send cookies to the Web server, they  don't send there the data saved in a local storage. The saved data is used only on the user's device. Also, the data saved in the local storage never expire. A Web application has to programmatically clean up the storage if need be, which will be illustrated below.

With `window.localStorage` or `window.sessionStorage` (a.k.a. Web Storage) you can store any objects on the local disk as key-value pairs. The main difference between the two is that the lifespan of the former is longer. If the user reloads the page, the Web browser or restart the computer - the data saved with `window.localStorage` will survive while the data saved via `window.sessionStorage` won't. Another distinction is that the data from `window.localStorage` is available for any page loaded from the same origin as the page that saved the data.  In case of `window.sessionStorage`, the data is available only to the window or a browser's tab that saved it.

Currently we use JavaScript API to work with Web Storage, but in the future any other programming language that can run in the browser will be able to work with the storage.  Saving the application state is the main use of the local storage. Coming back to a use case with the pharmaceutical salesman, in the offline mode you can save the name of the person she talked to in a particular medical office and the notes about the conversation that took place, for example,

[source, javascript]
----
localStorage.setItem('officeID', 123);
localStorage.setItem('contactPerson', 'Mary Lou');
localStorage.setItem('notes', 'Drop the samples of XYZin on 12/15/2013');
----

Accordingly, to retrieve the saved information you'd need to use the method `getItem()`.

[source, javascript]
----
var officeID = localStorage.getItem('officeID');
var contact = localStorage.getItem('contactPerson');
var notes = localStorage.getItem('notes');
----

This code sample are pretty simple as they store single values. In the real life scenarios we often need to store multiple objects. What it our salesperson has visited several medical offices and needs to save the information about all these visits in the Web Store?  For each visit we can create a key-value combination, where a _key_ will include the unique id (e.g. office ID), and the _value_ will be a JavaScript object (e.g. Visit) turned into a JSON-formatted string (see Chapter 4 for details) using `JSON.stringify()`. 

The following code sample illustrates how to store and retrieve the custom `Visit` objects. Each visit to a medical office is represented by on instance of the `Visit` object. To keep the code simple, we've have not included there any HTML components - its JavaScript functions get invoked and print their output on the browser's console.  

[source, javascript]
----
<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>My Today's Visits</title>
</head>
<body>
 <script>
  
  // Saving in local storage
  var saveVisitInfo = function (officeVisit) {            
          var visitStr=JSON.stringify(officeVisit);      // <1>
          window.localStorage.setItem("Visit:"+ visitNo, visitStr);
          window.localStorage.setItem("Visits:total", ++visitNo);
          
          console.log("saveVisitInfo: Saved in local storage " + visitStr);
 };

// Reading from local storage
  var readVisitInfo = function () {                      
           
     var totalVisits = window.localStorage.getItem("Visits:total");
     console.log("readVisitInfo: total visits " + totalVisits);
     
     for (var i = 0; i < totalVisits; i++) {    // <2>
       
         var visit = JSON.parse(window.localStorage.getItem("Visit:" + i));
         console.log("readVisitInfo: Office " + visit.officeId + 
                     " Spoke to " + visit.contactPerson + ": " + visit.notes);
  }
 };

// Removing the visit info from local storage
var removeAllVisitInfo = function (){             // <3>
          var totalVisits = window.localStorage.getItem("Visits:total");  
          
          for (i = 0; i < totalVisits; i++) {
              window.localStorage.removeItem("Visit:" + i);
      } 
  
      window.localStorage.removeItem("Visits:total");
      
      console.log("removeVisits: removed all visit info"); 
}

   var visitNo = 0;
   
   // Saving the first visit's info                   
   var visit = {                                // <4>
         officeId: 123,
         contactPerson: "Mary Lou",
         notes: "Drop the samples of XYZin on 12/15/2013"
    };     
    saveVisitInfo(visit);
    
    // Saving the second visit's info           // <5>
    visit = {
         officeId: 987,
         contactPerson: "John Smith",
         notes: "They don't like XYZin - people die from it"
    };
    saveVisitInfo(visit);   
    
   // Retrieving visit info from local storage
   readVisitInfo();                             // <6>
   
   // Removing all visit info from local storage   
   removeAllVisitInfo();                        // <7>
   
   // Retrieving visit info from local storage - should be no records
   readVisitInfo();                             // <8> 
        
  </script>
</body>
</html>
----

<1> The function `saveVisitInfo()` uses JSON object to turn the visit object into a string with `JSON.stringify()`, and then saves this string in the local storage. This function also increments the total number of visits and saves it in the local storage under the key `Visits:total`.

<2> The function `readVisitInfo()` gets the total number of visits from the local storage and then reads each visit record recreating the JavaScript object from JSON srting using `JSON.parse()`.

<3> The function `removeAllVisitInfo()` reads the number of visit records, removes each of them, and then removed the `Visits:total` too.  

<4> Creating and saving the first visit record

<5> Creating and saving the second visit record

<6> Reading saved visit info

<7> Removing saved visit info. To remove the entire content that was saved for a specific origin call the method `localStorage.clear()`.

<8> Re-reading visit info after removal

<<FIG1-4>> shows the output on the console of Chrome Developers Tools. Two visit records were saved in local storage, then they were retrieved and removed from the storage. Finally, the program attempted to read the value of the previously saved `Visits:total`, but it's null now - we've removed from the `localStorage` all the records related to visits.

[[FIG1-4]]
.Chrome's console after running the Visits sample
image::images/fig_01_04.png[]

TIP: If you are interested in intercepting the moments when the content of local storage gets modified, listen to the DOM `storage` event, which carries the old and new values and the URL of the page whose data is being changed. 

=== GeoLocation

Covered in ch3

=== History API

To put is simple, http://www.w3.org/TR/html5/browsers.html#the-history-interface[History API] is about ensuring that the Back/Forward  buttons on the browser toolbar can be controlled programmatically. Each Web browser has the `window.history` object. The History API is not a new HTML5 API,and the `history` object had such methods as `back()`, `forward()`, and `go()` for many years. But HTML5 adds new methods `pushState()` and `replaceState()`, which allow to modify the browser's address bar without reloading the Web page. 

Imagine a Single Page Application (SPA) that has a navigational menu to open various views as based on the user's interaction. Since these views represents some URLs loaded by making AJAX calls from your code, the Web browser still shows the original URL of the home page of your Web application. 

The perfect user would always navigate your application using the menus and controls you provided, but what if she clicks on the Back button of the Web browser?  If the navigation controls were not changing the URL in the browser's address bar, the browser obediently will show the Web page that the user has visited before even launching your application, which is not what she intended to do. 

==== Modifying the Browser's History with pushState()

If the URL of your application is http://myapp.com and the user clicked on the menu item Get Customers, which made an AJAX call loading the cucustomers, you can programmatically change the URL on the browser's address line to be http://myapp.com/customers without asking to Web browser to load anything from this URL. You do this by invoking the `pushState()` method. 

The browser will just remember that the current URL is http://myapp.com/customers, while the previous was http://myapp.com. So pressing the Back button would change the address back to http://myapp.com, and not some unrelated Web application. The Forward button will also behave properly as per the history chain set by your application.

The `pushState()` takes three arguments: 

* The application specific state to be associated with the current view of the Web page

* The title of the current view of the Web page. It's currently not supported  

* The suffix to be associated with the current view of the page. It'll be added to the address bar of the browser.  

[source, javascript]
----
<head>
	<meta charset="utf-8">
	<title>History API</title>
 </head>
 <body>
  <div id="main-container">
  	 <h1>Click on Link and watch the address bar...</h1>

    <button type="button" onclick="whoWeAre()">Who we are</button>  <1> 

    <button type="button" onclick="whatWeDo()">What we do</button>	
  
  </div>
  
  <script>
    
     function whoWeAre(){
     	var locationID= {locID: 123,                            // <2>
     		        uri: '/whoweare'};
     	
     	history.pushState(locationID,'', 'who_we_are' );       // <3> 
     }
     
     function whatWeDo(){
     	var actionID= {actID: 123,                              // <4>
     		          uri: '/whatwedo'};

     	history.pushState(actionID,'', 'what_we_do' );          // <5>
     }	
  </script>
 </body>
</html>
----

<1> On a click of the button call the event handler function. Call the `pushState()` to modify the browser's history. Some other processing like making an AJAX request to the server can be done `in whoWeAre()` too.

<2> Prepare the custom state object to be used in server side requests. The information about _who we are_ depends on location id. 

<3> Calling `pushState()` to remember the customer id, the page titleis empty (not supported yet), and adding the suffix _/whoweare_ will serve as a path to the server-side REST request.

<4> Prepare the custom state object to be used in server side requests. The information about _what we do_ depends on customer id. 

<5> Calling `pushState()` to remember the customer id, the page titleis empty (not supported yet), and adding the suffix _/whatwedo_ will serve as a path to the server-side REST request.

This above sample is a simplified example and would require more code to properly form the server request, but our goal here is just to clearly illustrate the use of History API.

<<FIG1-11>> depicts the view after the user clicked on the button Who We Are. The URL now looks as http://127.0.0.1:8020/HistoryAPI/who_we_are, but keep in mind that if you try to reload the page while this URL is shown, the browser will give you a Not Found error and rightly so. There is no resource that represents the URL that ends with _who_we_are_ - it's just the name of the view in the browser's history.

[[FIG1-11]]
.Testing pushState()
image::images/fig_01_11.png[]

Using the `replaceState()` you can technically "change the history". We are talking about the browser's history, of course.


==== Processing the popstate Event

But changing the URL when the user clicks on the Back or Forward button is just the half of the job to be done. The content of the page has to be refreshed accordingly. The browser dispatches the event `window.popstate` whenever the browser's navigation history changes either on initial page load, as a result of clicking on the Back/Forward buttons, or by invoking `history.back()` or `history.forward()`. 

Your code has to include an event handler function that will  perform the actions that must be dome whenever the application gets into the state represented by the current suffix, e.g. make a server request to retrieve the data associated with the state _who_we_are_. The `popstate` event will contain a copy of the history's entry state object. Let's add the following event listener to the `<script>` part of the code sample from previous section:

[source, javascript]
----
addEventListener('popstate',function (evt){
  console.log(evt);
});
----	  

<<FIG1-12>> depicts the view of the Chrome Developers Tool when the debugger stopped in the listener of the `popstate` event after the user clicked on the buttons Who We Are, then What We Do, and then the browser's button Back. On the right hand side you can see that the event object contains the `evt.state` object with the right values of `locID` and `uri`. In the real world scenario these values could have been used in, say AJAX call to the server to recreate the view for the location ID 123.

[[FIG1-12]]
.Monitoring popState with Chrome Developers Tool
image::images/fig_01_12.png[]

TIP: If you'll run into a browser that doesn't support HTML5 History API, consider using the https://github.com/browserstate/History.js[History.js] library.

=== Application Cache



=== Summary

In this chapter you've got introduced to a number of useful HTML5 APIs. You know how to check if a particular API is supported by your Web browser. But what if you are one of many enterprise developers that must use Internet Explorer of the versions earlier than 10.0?
In this case http://www.google.com/chromeframe[Google Chrome Frame] plugin for Internet Explorer.

The users have to install Google Frame on their machines, and Web developers just need to add the following line to their Web pages:

[source, html]
----
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
----

After that the Web page rendering will be done by Chrome Frame while your Web application will run in Internet Explorer.

