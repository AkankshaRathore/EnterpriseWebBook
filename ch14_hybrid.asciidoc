== Hybrid Applications: HTML + Native API

Both Web and native applications have their pros and cons. Let's start with some of the examples of the native applications that exist today.  

Bank of America's native mobile application allows you to deposit checks by taking a photo of the front and back sides of the check and entering the amount. At the time of this writing, they support iPhones, Android, Windows phones, and iPads. 

Near Field Communication (NFC) technology allows NFC-enabled devices communicate with each other in close distance using radio frequencies. NFC can be used for payments (no need to enter passwords) and data sharing (contacts, photos, et al.). Proliferation of NFC in banking will seriously hurt the credit cards industry. A number of smartphones already support NFC technology (see http://www.nfcworld.com/nfc-phones-list/[http://www.nfcworld.com/nfc-phones-list]). Add one of the existing fingerprint biometrics solutions, and your mobile phone becomes your wallet. 

While native applications have full access to all hardware of the device (e.g. camera, microphone, et al.), they have drawbacks too. For instance, if you want to publish your application at Apple's App Store you have to submit your application in advance and wait for an approval. If a crucial bug is found in your application, even though if you could fix it in a day, you can't put a new version in production until it went through an approval process. Back in 2011 Financial Times (FT) decided to stop using their native iOS application because Apple wouldn't share the data about FT subscribers. Don't forget that Apple would get their own cut from each FT subscription. 

On one hand it's good to have an ability to publish your latest Web applications on your own servers without the need to ask for a permission. On the other hand, the presence on Apple's iTunes is a good channel for bringing new customers. The publisher of New York magazine is heavily investing into their native application for iPad but the newer versions of their Web applications are as engaging as their native piers. If you Web application has to be discoverable and visible by search engines, Web application are definitely better.

The _hybrid applications_ promise you to have the best of both worlds. A Web application written in HTML/JavaScript has access to the hardware of the mobile device via a third-party library such as PhoneGap.The PhoneGap recompiles HTML/JavaScript code to create a platform specific application with an embedded Web browser, where your HTML/JavaScript code will run. This embedded browser (a.k.a. Web View) is chrome-less and your application is getting access to full size of the device screen. 

The PhoneGap packaging tool takes your HTML/JavaScript/CSS code, compiles it for the required mobile platform and create a native application that has access to the native functionality of hardware, for example, if you need to deploy it under iOS, you'll get an IPA file, and for deployment on Android devices you'd be getting an APK file. The hybrid applications may be not as fast as the native ones, and the architects responsible for defining mobile enterprise strategy must setting their priorities.

If a particular application will be used only by the employees of the organization who will use limited and defined number of mobile devices, and if making employees productive is the main goal - develop native applications. Start with developing and deploying such an application for the pilot OS (typically iOS 6 or Android 4), and then gradually add support for more  platforms, budget permitting. If you are planning to develop a Web application with relatively simple UI (e.g. Save Sick Child) and have to support a wide variety of unknown consumer devices (e.g. allow people make donation from any device) - develop a HTML5 Web application. 

Consider developing a hybrid application for anything in between, and in this chapter we'll create a hybrid version of our Save Sick Child application with http://phonegap.com/[PhoneGap] framework. To be more specific, we'll access the camera of the smartphone and will use the PhoneGap PayPal plugin to process donations.

TIP: For current list of available PhoneGap plugins for various mobile platforms visit the github repository at https://github.com/phonegap/phonegap-plugins[https://github.com/phonegap/phonegap-plugins].

=== What's PhoneGap 

First of all, PhoneGap is not a competitor of such mobile frameworks as jQuery Mobile, Sencha Touch and the like. PhoneGap is a technology for creating *an application container* that can run inside the HTML5 code written with or without using these frameworks. So when you submit a mobile application to the App Store of your choice, it's packaged the same way as a native application for the selected platform. Besides offering such packaging, PhoneGap provides the JavaScript API for getting access to the hardware of mobile devices.


TIP: Display messages using Phonegap's `navigator.notification.alert()` and the user will see native dialog box in his mobile device. The `Notification` object also supports `confirm()`, `beep()`, and `vibrate()` methods.

TIP: Do most of your debugging in the desktop browser. To avoid breaking your application don't just assume that it runs on a mobile device that, say has a camera. Surround your code with if(camera){...} so it can work on a desktop too. 

****

NOTE: PhoneGap is a brand own by Adobe. On the other hand, Apache Foundation has an open source project called Cordova, which started from the code donated by Adobe to Apache. Lots of developers from around the world work on Cordova, but Adobe's using this library to create their own way of compiling and distributing mobile applications, which is branded as PhoneGap. The closest analogy is the  Chrome and Safari browsers built on the same open source rendering engine Webkit.  

****


=== Epilogue


Even though this book is about HTML5, the authors would rather work with compiled languages that produce applications to run in virtual machines. Such software platforms are more productive for development and more predictable for deployment. While writing this book we were often arguing about pros and cons of switching to HTML5, and so far we are concerned that the HTML/JavaScript/CSS platform is not ready for developing of the enterprise applications just yet. We live in the era when amateurs feel comfortable creating Web sites and that JavaScript provides flexibility and customization the Access and Excel provided in the old good PC times. 

Till this day Microsoft Excel is the most popular application among business users in the enterprises. They start the application locally, it has a local storage that enables work in the occasionally-connected scenarios. Both the data and the code are physically located close to the user's heart. Microsoft Excel allows the users to have her own little pieces of data and amateurish-but-working-code (a.k.a. formulas) very close and personal. Right on the desktop. No need to ask these IT prima donnas for favors. No dependencies on the connectivity or some mysterious servers being slow or down. The most advanced business users even learn how to operate MS Access database to further lessen the dependency from IT.  

But there is only so much you can do with primitive tools. Visual Basic was "JavaScript" of the nineties - it had similar problems, but nevertheless had huge followings. Now the same people are doing JavaScript. If we don't break this cycle by adopting a common to all browsers VM, we are doomed for going through the generation after generation of underpowered crap. 

Recently, one of our clients from Wall Street sent us a list of issues to be fixed in an Web application that we were developing using Adobe Flex framework (Flash Player was the VM, where this application ran). One of the requested fixes was "remove a random blink while a widget moves in the window and snaps to another one". We've fixed it. You may argue that Flash Player as any browser's plugins are going away.  But the bar set by Flash based enterprise applications is set pretty high. We hope that future enterprise Web applications developed with HTML6 will raise the expectations in the user experience area. The time will come when HTML widgets won't blink in any of the major browsers.

We wrote this book to help people with understanding of what HTML5 applications are about. But make no mistakes - the world of HTML5 is not a peachy place in the future preached by educated and compassionate scientists, but rather a nasty past that is catching up bringing the mob with it.

It's a past and it's the future. The chances are slim that any particular vendor will win all or even 80% of the market of the mobile devices. In competitive business, being able to make an application available ONLY to 80% of the market is not good enough, hence the chances that any particular native platform will dominate in the Web developers are slim. HTML5 and related technologies will serve as a common denominator for mobile developers.

The authors of this book have more than 100 years of combined experience in development of enterprise applications. Over these years we've learned that the saying "Today's on Wall Street, tomorrow on Main street" works. IT departments of financial companies are very pragmatic in selecting tools for development of their software. Especially, we're watching the platforms used for development of financial trading applications - they must be fast, reliable, and any delays in processing or clumsy UI may lead to substantial money losses. Besides, the development cost dramatically increases if an IT organization sets a goal to offer their trading application to the entire mobile market, which is a moving target today and will remain the same in the foreseeable future.

Check out one of the trading applications named https://www.trademonster.com/trading/mobile-trading.jsp[tradeMonster]. It has been developed using HTML5 and uses the same code base for all mobile devices. The desktop version was built using Adobe Flex framework that uses Flash Player as a VM. Yes, they have created native wrappers to offer this application in Apple or Google's application stores, but it's still an HTML5 application nevertheless. You can create a paper trading account (no money is involved in trading) and test their application. If you like it, consider using HTML5.  

Enterprise IT managers need a cross platform development and deployment platform, which HTML5 is promising to be. Take with a grain of salt all the promises of being 100% cross-platform made by any HTML5 framework vendor. "With our HTML5 framework you won't need to worry about differences in Web browsers". Yeah, right! HTML5 is not a magic bullet, and don't expect it to be. But HTML5 is for real and may become the most practical development platform for your organization today.


