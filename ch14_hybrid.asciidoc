:toc:
:toclevels: 4

== Hybrid Mobile Applications

The word http://www.thefreedictionary.com/hybrid[hybrid] means something of mixed origin or composition. In case of mobile applications such a mix consists of the the code written in HTML5 and one of the compiled programming languages. In other words, hybrid applications include code written in HTML5 and native languages.

=== Native applications

We call a mobile application _native_ if it was not written in HTML/JavaScript, but rather in a programming language recommended for devices of this mobile platform. The manufacturer of the mobile devices makes an SDK available for software developers and describes a process of creating native applications. Such SDK provides API for accessing all of the features of the mobile device (e.g. phone, contact list, camera, microphone and others).
Such SDKs include UI components that have a _native look and feel_, so applications developed by third parties look the same as those developed by the device manufacturer.

For native applications, a device manufacturer usually offers an _application store_, which serves as an online market place where people would shop for applications. Apple has the _App Store_ for iOS and OS X applications. Google has _Google play_ for Android applications. _BlackBerry World_ is a store where you can find applications for mobile devices manufactured by RIM. Microsoft has their store too. 

There are more application stores available, and having a market place (a one stop shop) is really important for consumer-oriented application developers. For enterprise applications, having public distribution channel may be less important, but enterprises need a way to publish mobile applications for private use. 

Apple has https://developer.apple.com/programs/ios/enterprise/[iOS Developer Enterprise Program]. For Android applications, there is a http://support.google.com/a/bin/answer.py?hl=en&answer=2494992[Google Play Private Channel] for internal distribution channels. Microsoft has http://www.windowsphone.com/en-US/business/for-business[their process] for business applications too.

==== Native vs. Web Applications

Both Web and native applications have their pros and cons. First of all, native applications are usually faster than Web applications. 

Let's talk about some of the examples of the native applications that exist today. Bank of America's native mobile application allows you to deposit a check by taking a photo of the front and back sides of the check and entering the amount. At the time of this writing, they support iPhones, Android, Windows phones, and iPads. Other major banks offers similar service too.

Near Field Communication (NFC) technology allows NFC-enabled devices communicate with each other in close distance using radio frequencies. NFC can be used for payments (no need to enter passwords) and data sharing (contacts, photos, et al.) Proliferation of NFC in banking will seriously hurt the credit cards industry. A number of smartphones already support NFC technology (see http://www.nfcworld.com/nfc-phones-list/[http://www.nfcworld.com/nfc-phones-list]). Add one of the existing fingerprint biometrics solutions, and your mobile phone becomes your wallet. 

While native applications have full access to all the native API  of the device (e.g. contacts, camera, microphone, et al.), they have drawbacks too. For instance, if you want to publish your application at Apple's App Store you have to submit your application in advance and wait for an approval. If a crucial bug is found in your application, even though if you could fix it in a day, you can't put a new version in production until it went through an approval process. Back in 2011 Financial Times (FT) decided to stop using their native iOS application because Apple wouldn't share the data about FT subscribers. Don't forget that Apple would get their own cut from each FT subscription. 

Mobile Web applications don't require any third-party involvement for the distribution. An enterprise can make them available at any time by simple adding a Download button on the corporate Web site. On one hand it's good to have an ability to publish your latest Web applications on your own servers without the need to ask for a permission. On the other hand, the presence on Apple's iTunes is a good channel for bringing new customers. 

The publisher of New York magazine is heavily investing into their native application for iPad, but the newer versions of their Web applications are as engaging as their native piers. If your Web application need to be discoverable and visible by search engines, Web applications are definitely better.

=== Hybrids Applications: PhoneGap vs Titanium

_Hybrid applications_ promise you to have the best of both worlds. Develop a Web application in HTML/JavaScript, but access the native API of the mobile device via third-party solutions such as http://phonegap.com/[PhoneGap] from Adobe or http://www.appcelerator.com/platform/titanium-platform/[Titanium] from Appcelerator (the company behind Aptana Studio). 

PhoneGap is a brand own by Adobe. Apache Software Foundation has an open source platform called http://cordova.apache.org/[Cordova] for building native mobile applications with HTML5. Cordova started from the code donated by Adobe to Apache. Lots of developers from around the world work on Cordova, but Adobe's using this library to create their own workflow of compiling and distributing mobile applications. Adobe branded their Cordova-based package as PhoneGap. The closest analogy is the Chrome and Safari browsers built on the same open source rendering engine Webkit.  

PhoneGap is a set of APIs and a workflow for creating _an application container_ with your Web application written in  HTML5 (with or without frameworks) that also allows to make JavaScript calls to access native API offered by the mobile OS. 

The https://build.phonegap.com/[PhoneGap Build] cloud service takes your HTML/JavaScript/CSS code, compiles it for the required mobile platform and creates a native application (a wrapper with embedded chrome-less Web browser, a.k.a. Web view) that looks native to the mobile OS, and has access to the native API. Refer to the http://docs.phonegap.com/en/2.9.0/index.html[API reference] to see what's supported on each platform. This native wrapper serves as a messaging bus between the external native API and the HTML-based application running inside the Web view. 

If you need build an application to run under iOS, PhoneGap Build will create an IPA file. For deployment on Android devices you'd be getting an APK file. After that, if you want to submit your application to public or a private application store, follow the procedure that exists for native applications for the selected platform. The PhoneGap Build service can package your application for iOS, Android, Windows Phone, and Blackberry.

Some people complain about the PhoneGap performance if compared to native applications. Developers need to use best practices recommended for any HTML-based applications, but performance also depends on the Web rendering engine utilized on each mobile platform. If the UI components of your HTML5 framework don't look native enough, this may be considered as a concern for some applications too. On the other hand, PhoneGap allows you to leverage the existing HTML skills for all major mobile platforms, and their native API is not overwhelming and is easy to learn. 

Titanium offers its own set of tools and more extensive API. You'd be writing code in JavaScript (no HTML or CSS) and would need to learn The compiled and deployed application is a JavaScript embedded inside Java or Objective-C code plus JavaScript interpreter plus platform-specific Titanium API. The JavaScript objects talk to it's native Titanium piers via proxies. There is not Web view rendering here - the JavaScript code is evaluated by the embedded interpreter, but UI components are from Titanium itself.

Titanium UI components can be extended to use native OS interface abilities to their fullest. But if you want to go this route, why not writing the entire application natively? Besides, as new platform will be introduced, you'll depend on the willingness of the Titanium developers to create a new set of components in a timely fashion.  

You can't expect high performance from the Rhino JavaScript engine, which is used for Android and Blackberry applications. The latest JavaScript engine from Oracle is called Nashorn, but it's available only for the very latest Java version, which doesn't run on Android, and will not run in the foreseeable future. Nashorn is as fast as http://v8.googlecode.com/svn/data/benchmarks/v7/run.html[Google's V8], but Rhino is  slower. Does it mean that Titanium applications on Android and Blackberry will alway run slower? It seems to be the case unless Oracle and Google will find a way to stop their quarrel around Java. 

The learning curve of the Titanium API is steeper than with PhoneGap. 

Hybrid applications may be not as fast as the native ones, and application architects responsible for defining mobile enterprise strategy must set their users' expectations. 

If a particular application will be used only by the employees of the organization who use limited and defined number of mobile devices, and if making employees (the users) productive is the main goal - develop native applications. Start with developing and deploying such an application for the pilot OS (typically for the latest iOS or Android OS), and then gradually add support for more  platforms, budget permitting. If you are planning to develop a Web application with relatively simple UI (e.g. Save Sick Child) and have to support a wide variety of unknown consumer devices (people should be able to make donation from any device) - develop an HTML5 Web application. 

Consider developing a hybrid application for anything in between, and in this chapter we'll create a hybrid version of our Save Sick Child application with http://phonegap.com/[PhoneGap] framework. To be more specific, we'll access the camera of the smartphone and will use the PhoneGap PayPal plugin to process donations.

=== Intro to the PhoneGap Workflow

Download PhoneGap from http://phonegap.com/[phonegap.com]. Unzip the downloaded file, and you'll get a folder with the phonegap library and product documentation. The name of our library was phonegap-2.9.0.

NOTE: PhoneGap documentation may not reflect the latest code. To see what platforms  are supported by the current version of PhoneGap, just open subfolder _lib_ - the code for each supported platform has a corresponding subdirectory. For example, Figure <<FIG14-2>> will give you an idea on what's currently supported. 

[[FIG14-2]]
.What comes with PhoneGap 2.9
image::images/fig_14_02.png[] 

We use Mac OS for development with pre-installed https://developer.apple.com/xcode/[Xcode IDE], which is available at Apple's App Store at no charge. In Xcode, open the menu Preferences and in Downloads panel install iOS 6.0 Simulator and Command Line Tools (CLT). 

It's time for the PhoneGap Hello World, and we'll build it for iOS. We are going to generate the initial project using Cordova command line interface (CLI) as described in http://docs.phonegap.com/en/2.9.0/guide_cli_index.md.html#The%20Cordova%20Command-line%20Interface[documentation]. 
After generating Hello World with _cordova create_ command, it creates files and directories shown on Figure <<FIG14-3>>. 

NOTE: PhoneGap documentation offers different methods for generating projects. Each of them generates slightly different content. We'll use the http://docs.phonegap.com/en/2.9.0/guide_cli_index.md.html#The%20Cordova%20Command-line%20Interface[first one] for generating Hello World, and http://docs.phonegap.com/en/2.9.0/guide_command-line_index.md.html#Command-Line%[the second one] for generating Save Sick Child. 

[[FIG14-3]]
.Cordova-generated project Hello World
image::images/fig_14_03.png[] 

NOTE: If you used the command _cordova create HelloWorld com.example.hello "Hello World"_, exactly as it shown in the documentation, keep in mind that when you'll be creating the certificate to run it on the iOS device, it has to be valid for applications that start with com.example. For more details see the sidebar "Testing Application on iOS Devices" later in this chapter.

The content of generated index.html is shown next. It includes several meta tags to use the entire screen of the mobile device and don't allow scaling by user's gestures. Then it includes a couple of JavaScript files. 

[source, html]
----
<!DOCTYPE html>
<html>
 <head>
     <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
     <meta name = "format-detection" content = "telephone=no"/>
     <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width;" />
     <link rel="stylesheet" type="text/css" href="css/index.css" />
     <title>Hello Cordova</title>
 </head>
 <body>
     <div class="app">
         <h1>Apache Cordova</h1>
         <div id="deviceready">
             <p class="status pending blink">Connecting to Device</p>
             <p class="status complete blink hide">Device is Ready</p>
         </div>
     </div>
     <script type="text/javascript" src="cordova.js"></script>
     <script type="text/javascript" src="js/index.js"></script>
     <script type="text/javascript">
         app.initialize();
     </script>
 </body>
</html>
----

This HTML includes the code to load the cordova.js library and the initialization code from index.js, and then immediately calls `app.initialize()`. But if you look at <<FIG14-3>> the file cordova.js is missing. Cordova CLI will add it to the project during another phase of code generation for specific mobile platforms. For now, let's look at the code of the index.js.

[source, javascript]
----
var app = {
  initialize: function() {                       // <1>
      this.bind();
  },

  bind: function() {
    document.addEventListener('deviceready',     // <2>
               this.deviceready, false);
  },

  deviceready: function() {
    
    app.report('deviceready');
  },

  report: function(id) {                        //  <3>

      console.log("report:" + id);
      
      document.querySelector('#' + id + ' .pending').className += ' hide';
      var completeElem = document.querySelector('#' + id + ' .complete');
      completeElem.className = completeElem.className.split('hide').join('');
  }
};
----

<1> This function is being called when all scripts are loaded in index.html.

<2> The mobile OS sends the `deviceready` event to the PhoneGap application when it's ready to invoke native APIs.

<3> The function `report()` is called from the `deviceready` event handler. It hides the `.pending <p>` and shows the `.complete <p>` in index.html. Technically, `split('hide')` followed by `join('')` perform removal of the word hide.

WARNING: It's not too difficult to prepare such simple HTML and JavaScript files manually, but we prefer using code generators when available - they are faster and less error prone. Unfortunately, PhoneGap's code generators still have room for improvement, and manual intervention will be required anyway.

According some Cordova CLI documentation after the code is generated you need to add the platforms for which you are planning to prepare PhoneGap builds. For example, you can run the following commands from the Terminal window (inside the HelloWorld directory) to request the builds for ios, android, and blackberry:

_cordova platform add ios_

_cordova platform add android_

NOTE: The first command will run fine, because we have Xcode installed. The second command will be giving you errors until you install the latest Android SDK as described in the sidebar.

After running these commands, the initially empty directory _platforms_ will be filled with additional files specific to each platform. Technically, these commands generate separate Hello World projects - one per platform. Each of them will have its own _www_ directory with index.html and cordova.js that was missing during the initial project generation. You can see on Figure <<FIG14-4>> the content of the ios folder that was generated as a result of executing command _cordova platform add ios_.

[[FIG14-4]]
.Cordova-generated project for iOS platform
image::images/fig_14_04.png[] 

Double-click on the file Hello_World.xcodeproj, and it'll be opened as a project in Xcode. Press the button Run on the top left corner of the toolbar - the project will be compiled and started in the iOS simulator (see Figure <<FIG14-4-1>>). Note the "Device is ready" text from index.html (as per index.css this text is blinking and is shown in the upper case).

[[FIG14-4-1]]
.Running Hello World in XCode
image::images/fig_14_04_1.png[] 

.Testing Applications on iOS Devices
*******
If you want to test your application not in the simulator, but  on the physical iOS device, it has to be connected to your Mac computer, enabled for deployment and recognized by Apple. Details on _provisioning your devices for development_ are described in the online http://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/YourFirstAppStoreSubmission/ProvisionYourDevicesforDevelopment/ProvisionYourDevicesforDevelopment.html[iOS Developer Library]. If you prefer shorter instructions, here's what worked for us:

1. Open a Keychain Access application on your Mac computer and create a certificate request using the menus Keychain Access | Certificate Assistant | Request a Certificate from Certificate Authority. This will create a file with the name extension .certSigningRequest.

2. Log on to Member Center at https://developer.apple.com[developer.apple.com] and create a certificate in there for iOS Development specifying the wildcard (an asterisk) in the Bulk name unless you want to restrict this certificate to be used only with application that start with a certain prefix. During this step you'll need to upload the .certSigningRequest file created in the previous step. 

3. After this certificate is created, download this file (its  name ends with .cer), and double-click on it to open in your local keychain. Find it in the list of certificates and expand it - it should include the private key. 

4. Remain in the Member Center, and create a unique application ID.

5. Finally, in the same Member Center create a Provisioning Profile.     

6. In Xcode, open the menu Window | Organizer, go to Provisioning profiles window, and refresh it. You should see the newly created provisioning profile marked with a green bullet. A physical file with the name extension .mobileprovision correspond to this profile.

7. Select your iOS device in the active scheme dropdown on top left and run your Hello World or other project on the connected device.
*******

TIP: Read Apple's https://developer.apple.com/library/mac/#documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html[App Distribution Guide] to learn how to distribute your iOS applications.

// Tech support doc: https://developer.apple.com/search/index.php?q=tn2250

.Installing Android SDK
******
To get Android SDK, go to http://developer.android.com/sdk[android.com/sdk]. We are going to do a simple install by pressing the button "Download the SDK ADT Bundle for Mac", which will download and install Eclipse IDE with ADT plugin, Android SDK tools, Android Platform tools, and Android platform. But if you already have Eclipse IDE and prefer to install and configure required tooling manually, follow the instructions published on this Web site under the section "Use and Existing IDE". 

After downloading the bundle, unzip this file, and it'll create a folder with two subfolders: _sdk_ and _eclipse_. Start Eclipse IDE from _eclipse_ folder accepting the location of the default workspace. Press the little Plus sign on the top toolbar and open perspective DDMS. This is the place where you can use Android emulator while developing Android applications.
******

Blackberry developers can download their WebWorks SDK at http://developer.blackberry.com/html5/download/[developer.blackberry.com/html5/download] as well as BLackBerry 10 Simulator. If you haven't downloaded the Ripple Emulator (see Chapter 12) you can get it there too. 

=== Using Adobe PhoneGap Build Service

Instead of installing multiple SDKs for different platforms you can use the cloud service https://build.phonegap.com/[Adobe PhoneGap Build], which already has installed and configured all supported SDK's and will do a build of your application for different platforms.

Visit build.phonegap.com and sign in with your Adobe or Github ID. If your project resides on Github, copy its URL to the text field shown on Figure <<FIG14-4-2>>. The other way to do a build is to compress your project's _www_ directory and upload this zip file there.

[[FIG14-4-2]]
.Submitting Application to PhoneGapBuild
image::images/fig_14_04_2.png[]

Before zipping up Hello World's  _ios/www_ directory, open and modify the file config.xml. The generated XML contains a lot of non-related to iOS entries. All of the lines that contain android or blackberry should be removed. 

[source, xml]
----
<?xml version='1.0' encoding='utf-8'?>
<widget id="com.example.hello" version="2.0.0" 
        xmlns="http://www.w3.org/ns/widgets" 
        xmlns:cdv="http://cordova.apache.org/ns/1.0">
    
    <name>Hello World</name>
    
    <description>
        A sample Apache Cordova application that responds to the deviceready event.
    </description>
    
    <author email="callback-dev@incubator.apache.org" href="http://cordova.io">
        Apache Cordova Team
    </author>
    
    <icon height="512" src="res/icon/cordova_512.png" width="512" />
    <icon cdv:platform="ios" height="144" src="res/icon/cordova_ios_144.png" width="144" />
    <cdv:splash cdv:platform="ios" height="748" src="res/screen/ipad_landscape.png" width="1024" />
    <cdv:splash cdv:platform="ios" height="1004" src="res/screen/ipad_portrait.png" width="768" />
    <cdv:splash cdv:platform="ios" height="1496" src="res/screen/ipad_retina_landscape.png" width="2048" />
    <cdv:splash cdv:platform="ios" height="2008" src="res/screen/ipad_retina_portrait.png" width="1536" />
    <cdv:splash cdv:platform="ios" height="320" src="res/screen/iphone_landscape.png" width="480" />
    <cdv:splash cdv:platform="ios" height="480" src="res/screen/iphone_portrait.png" width="320" />
    <cdv:splash cdv:platform="ios" height="640" src="res/screen/iphone_retina_landscape.png" width="960" />
    <cdv:splash cdv:platform="ios" height="960" src="res/screen/iphone_retina_portrait.png" width="640" />
    
    <feature name="http://api.phonegap.com/1.0/device" />
    
    <preference name="phonegap-version" value="2.9.0" />
    <access origin="*" />
</widget>

----

Try to specify the latest supported Phonegap version in the "phonegap-version" attribute. The online document https://build.phonegap.com/docs/config-xml[Using config.xml] has the information about supported versions and other essential properties. We'll change the phonegap-version value to 2.9.0, which is the latest supported version. You'll see some other entries in config.xml of the Save Sick Child application.

Now you select all the content inside the _ios/www_ folder and compress it into a zip file named helloworld-build.zip. Go to build.phonegap.com and press the button labeled "Upload a .zip file" and select helloworld-build.zip. When uploading is done, you'll see a next screen shown at <<FIG14-4-3>>. 

[[FIG14-4-3]]
.After helloworld-build.zip was uploaded
image::images/fig_14_04_3.png[]

Click on the button Ready to Build, and the build for all available platform will start. In you did everything right, after watching the wait cursor on above each icon, the builds will successfully complete, and you'll see a blue line under each button. Figure <<FIG14-4-4>> illustrates the case when the build failed for iOS and BlackBerry platformed (the first and fourth buttons are underlined in red color). Fixing the BlackBerry version of the application is not in our agenda, but let's take care about the iOS issue.

[[FIG14-4-4]]
.Two builds failed
image::images/fig_14_04_4.png[]

After clicking on the iOS button, it revealed the message in a dropdown box "No key selected". Another error message reads"You must provide the signing key first". The dropdown also offers an option to add the missing key. Selecting this option reveals a panel shown on Figure <<FIG14-4-5>>.

[[FIG14-4-5]]
.Uploading certificate and profile
image::images/fig_14_04_5.png[]

The missing key message actually means that they need the provisioning profile and certificate discussed in the section "Testing Applications on iOS Devices". The certificate has to be in the P12 format, and you can export it into the .p12 file from the Keychain Access program. During the export, you'll assign a password to the certificate that will be required by PhoneGap Build process. After uploading the .p12 and .mobileprovision to PhoneGap Build and unlocking the little yellow lock, rebuild the Hello World for iOS and it should be done without any errors this time.  

TIP: If you forgot where the .mobileprovision file is located, open Xcode and got to the menu Window | Organize, open the panel Provisioning Profiles under Library, right-click on the profile record and select Reveal in Finder.  

To complete the process, we need to distribute and deploy the application on your mobile device. There are two ways to do this. The first one is by using http://en.wikipedia.org/wiki/QR_code[QR Code] that was generated specifically for our application as shown on the right side of Figure <<FIG14-4-4>>. Just install the QR Reader application on your device, scan this code and the application will be installed.

If you prefer to physically copy files, you'll need to download them first from the build.phonegap.com on your computer and then copy it on the mobile device. To get the Android version of Hello World, just click on the button with Androids logo and the file HelloWorld-debug.apk will be downloaded to your computer. Copy this file to your Android device and enjoy the application. For the iOS version, click on the button with the iOS logo, which will download the file HelloWorld.ipa on your Mac computer. Double click on this file in Finder, and it'll bring it into the Application section of iTunes. Synchronize the the content of iTunes with the iOS device, and Hello World will be installed there. 

Phew! This was the longest description of developing and deploying the Hello World application not only in this book, but that we've ever written!  Of course, we picked deployment on the Apple's devices, which this the most complicated process among mobile developers. And we didn't even cover the process of submission the application in the App Store (you'll read more about it in the next section)! But developing and deploying application that have to run natively on multiple platforms is expected to be more complicated that deploying an HTML5 application in a Web browser. 

//TIP: Members of PhoneGap community can develop their own plugins for entire community to use. You can find details in this http://phonegap.com/blog/2013/07/15/using-plugins-with-phonegapbuild/[blog of Mike Harris]. 


//TIP: Display messages using Phonegap's `navigator.notification.alert()` and the user will see native dialog box in his mobile device. The `Notification` object also supports `confirm()`, `beep()`, and `vibrate()` methods.

//TIP: For current list of available PhoneGap plugins for various mobile platforms visit the github repository at https://github.com/phonegap/phonegap-plugins[https://github.com/phonegap/phonegap-plugins].


==== Distribution of Mobile Applications

Mobile device manufacturers set their own rules for the application distribution. Apple has the most strict rules for the iOS developers.

Apple runs the https://developer.apple.com/programs/start/ios/[iOS Developer Program], and if you're an individual who wants to distribute iOS application on the App Store, it'll cost you $99 per year. Higher education institutions who teach iOS development are enrolled into this program for free. iOS Developer Enterprise program costs $299 a year.

Besides being able to deploy the application in the App Store, developers are allow their beta-customer to test the application even before they were accepted in the store. Individual developers can share their application among up to 100 iOS devices identified by UUID (click on the serial number of your device in iTunes to see it). It's so-called Ad Hoc distribution.   
For example, after PhoneGap has built the .ipa file for the iOS, you can make it available for installation right on the beta-tester's device using such services as http://www.diawi.com/[diawi] or https://testflightapp.com/[TestFlight]. Upload the .ipa file and its provisioning profile to one of these services and you'll get the link (a URL) to be given to your testers -the UUID of their devices must be registered with your developer's profile. To do this, login to your account at developer.apple.com, select the section "Certificates, Identifiers & Profiles", then go to Devices and add the UUID of the iOS device to the existing list of registered devices. 

The owners of the enterprise license can distribute their applications right from their own Web sites.

Figure <<FIG14-5>> shows the snapshot from the iPhone after the tester clicked on such a link from diawi. Pressing the button Install Application completes the install of the application on your iOS device. 

[[FIG14-5]]
.Ad hoc application install from diawi
image::images/fig_14_05.png[] 


Android developers are not restricted in distributing of their application - upload the APK package with your application to your corporate Web site and send the URL to anyone who's interested. For example, the authors of this book are creating a software for insurance industry, where they offer to download both iOS and Android versions of the application right from their corporate Web site as shown at Figure <<FIG14-6>>. 

[[FIG14-6]]
.Distributing mobile applications at surancebay.com 
image::images/fig_14_06.png[]


=== Save Sick Child with PhoneGap

To demonstrate how the turn a Web application into a hybrid one, we'll take the code of the jQuery Mobile version of the Save Sick Child application (Chapter 12), add to it an ability to work with the photo camera using PhoneGap API, and create two builds ready to be deployed on iOS and Android platforms. in this exercise we'll use PhoneGap 2.9, which is the latest version at the time of this writing. 

But before even adding camera support, let's go through the process of building and deploying the jQuery Mobile version of this application in its existing form without changing even one line of code. 

We'll start with packaging this application for iOS and then we'll ask PhoneGap to use the same code and build a the application for Android. In this chapter we'll use Apple's XCode IDE under MAC OS to be able to prepare the code for iOS. Here's the step by step plan: 

1. Generate a new PhoneGap project using the http://docs.phonegap.com/en/2.9.0/guide_command-line_index.md.html#Command-Line%20Usage_ios[iOS command line tool]

2. Copy the existing HTML, CSS, JavaScript and other resources from jQuery Mobile Save Sick Child application into the directory _www_ of the newly generated Cordova iOS project.

3. Open XCode IDE and test the application on the real iOS device. 

4. Compress the entire content of the _www_ directory into a ZIP file, upload it to PhoneGap Web site and generate the APK file for deployment on Android device and IPA file for deployment under iOS.

5. Test the Save Sick Child application on the Android Device.

6. Test Save Sick Child on the iOS device.


=== Summary

Hybrid applications allow you to take your HTML5-based Web application, connect it to the native API of the mobile device and package it as a native application. The selling point of using Hybrids is that you can reuse the existing HTML5 expertise and with relatively small efforts get access to native capabilities of the mobile devices and distribute your HTML5 application as the native one through an App Store or a Market Place offered by the device manufacturers. If your organization already has software developers who know HTML5, leveraging their existing skills is a very appealing choice too.  

But make no mistakes - if you want to create the fastest possible application that looks exactly like other application that were specifically created for the selected mobile platform, developing in the native language prescribed by the device manufacturer is the right choice is to make. Will you be able to afford having experts in each mobile OS is a different and non-technical question. If you don't have such a luxury, going hybrid is a good compromise.


== Epilogue


Even though this book is about HTML5, the authors would rather work with compiled languages that produce applications to run in virtual machines. Such software platforms are more productive for development and more predictable for deployment. While writing this book we were often arguing about pros and cons of switching to HTML5, and so far we are concerned that the HTML/JavaScript/CSS platform is not ready for developing of the enterprise applications just yet. We live in the era when amateurs feel comfortable creating Web sites and that JavaScript provides flexibility and customization the Access and Excel provided in the old good PC times. 

Till this day Microsoft Excel is the most popular application among business users in the enterprises. They start the application locally, it has a local storage that enables work in the occasionally-connected scenarios. Both the data and the code are physically located close to the user's heart. Microsoft Excel allows the users to have her own little pieces of data and amateurish-but-working-code (a.k.a. formulas) very close and personal. Right on the desktop. No need to ask these IT prima donnas for favors. No dependencies on the connectivity or some mysterious servers being slow or down. The most advanced business users even learn how to operate MS Access database to further lessen the dependency from IT.  

But there is only so much you can do with primitive tools. Visual Basic was "JavaScript" of the nineties - it had similar problems, but nevertheless had huge followings. Now the same people are doing JavaScript. If we don't break this cycle by adopting a common to all browsers VM, we are doomed for going through the generation after generation of underpowered crap. 

Recently, one of our clients from Wall Street sent us a list of issues to be fixed in an Web application that we were developing using Adobe Flex framework (Flash Player was the VM, where this application ran). One of the requested fixes was "remove a random blink while a widget moves in the window and snaps to another one". We've fixed it. You may argue that Flash Player as any browser's plugins are going away.  But the bar set by Flash based enterprise applications is set pretty high. We hope that future enterprise Web applications developed with HTML6 will raise the expectations in the user experience area. The time will come when HTML widgets won't blink in any of the major browsers.

We wrote this book to help people with understanding of what HTML5 applications are about. But make no mistakes - the world of HTML5 is not a peachy place in the future preached by educated and compassionate scientists, but rather a nasty past that is catching up bringing the mob with it.

It's a past and it's the future. The chances are slim that any particular vendor will win all or even 80% of the market of the mobile devices. In competitive business, being able to make an application available ONLY to 80% of the market is not good enough, hence the chances that any particular native platform will dominate in the Web developers are slim. HTML5 and related technologies will serve as a common denominator for mobile developers.

The authors of this book have more than 100 years of combined experience in development of enterprise applications. Over these years we've learned that the saying "Today's on Wall Street, tomorrow on Main street" works. IT departments of financial companies are very pragmatic in selecting tools for development of their software. Especially, we're watching the platforms used for development of financial trading applications - they must be fast, reliable, and any delays in processing or clumsy UI may lead to substantial money losses. Besides, the development cost dramatically increases if an IT organization sets a goal to offer their trading application to the entire mobile market, which is a moving target today and will remain the same in the foreseeable future.

Check out one of the trading applications named https://www.trademonster.com/trading/mobile-trading.jsp[tradeMonster]. It has been developed using HTML5 and uses the same code base for all mobile devices. The desktop version was built using Adobe Flex framework that uses Flash Player as a VM. Yes, they have created native wrappers to offer this application in Apple or Google's application stores, but it's still an HTML5 application nevertheless. You can create a paper trading account (no money is involved in trading) and test their application. If you like it, consider using HTML5.  

Enterprise IT managers need a cross platform development and deployment platform, which HTML5 is promising to be. Take with a grain of salt all the promises of being 100% cross-platform made by any HTML5 framework vendor. "With our HTML5 framework you won't need to worry about differences in Web browsers". Yeah, right! HTML5 is not a magic bullet, and don't expect it to be. But HTML5 is for real and may become the most practical development platform for your organization today.