:toc:
:toclevels: 4

== jQuery Mobile

Today most of the enterprise applications are developed for desktop computers. The situation is changing, but it's a slow process. BYOD stands for Bring Your Own Device, and if five years ago it would be close to impossible to get a permission to bring your own computer to work and use it as for work related activities, the situation is a lot better now. Sales people want to use tablets while dealing with prospective clients. Business analysts want to be able to run familiar Web applications on their smartphones. Enterprises want to offer access to their valuable data to external clients from a variety of different devices. 

If you just finished reading the chapter on responsive design, you may be wondering, why not just build every Web application this way having a single code base? The reason being that small-screen devices are not too good in cases when the user not just browses the Web site but has to interact with it by entering data. In some cases the UI and the navigation for the mobile devices has to be custom designed to include only partial functionality where each page view is carefully designed to provide the best user experience. Besides, with responsive design the entire code and CSS for all devices is loaded to the user's smartphone making the application  unnecessary heavy and slow when the connection speed is not great.

With small screens you have to re-think carefully what are the must have  widgets and functionality that's really important for the business you're creating a Web application for. If it's a restaurant, you need to provide an easy way to find the menu, phone, address, and directions to your place. If it's a site to collect donations like our Save Sick Child the design should provide an easy way to donate, while the rest of the information should be hidden by simple navigational menus.

In rare occasions an enterprise application is created solely for the mobile platform. More often the task is to migrate an existing application to mobile platform or develop of separate versions of the same application for desktops and mobile devices. If a decision is made to develop native mobile applications then the choice of the programming languages is dictated by the mobile hardware. 

If it's a Web application then using the same framework for desktop and mobile platforms may shorten the development cycle.That's why we decided to cover such pairs in this book. The first pair are libraries, and the second - frameworks: 

* jQuery and jQuery Mobile 

* Ext JS and Sencha Touch

WARNING: Even though each of these pairs shares the same code for the core components, do not expect that each counterpart will behave the same way. You are still going to use different version of the code, for example, jQuery 2.0 and jQuery Mobile 1.3.1.

What's better jQuery Mobile or Sencha Touch? There is no general answer to this question. It all depends on the application you're building. If you need a simple mobile application for displaying various information (a publishing type of application), then jQuery Mobile will do the job with least efforts. If you are building an application that requires some serious data processing Sencha Touch is a better choice. Of course, there are lots of other frameworks and libraries that can help you with developing a mobile Web application. Do your homework and pick the one that fits your needs best. 

There's a http://www.markus-falk.com/mobile-frameworks-comparison-chart/[Web site] that compares mobile frameworks. It even has a little wizard application that allows you to pick a framework that meets your needs and is supported on required devices. <<FIG12-1>> is a fragment snapshot from this site. As you can see, jQuery Mobile supports the largest number of different platforms.

To start learning jQuery Mobile you need to know HTML, JavaScriot, CSS, and jQuery. In some publications you may see the statements that you could start using jQuery Mobile knowing only HTML. This is true till you'll run into the first `unexpected behavior` of your code, which will happen pretty soon in one of the Web browsers (take the statements about being a cross-browser framework with a grain of sault too). After that you need to add some event listeners, scripts, and start debugging.


[[FIG12-1]]
.A fragment of the Mobile Frameworks Matrix
image::images/fig_12_01.png[]

=== Where to get jQuery Mobile

http://jquerymobile.com[The Web site] of jQuery Mobile has all you need to start using this library. you can find lots of learning materials under the Demos section - they have tutorials, API reference, and samples of use. The Download section contains the links for the library itself.

There are two ways of including jQuery Mobile in the source code of your application: either download and uncompress the zip file in your local directory and specify this location in the source code of your application or include the URLs of the CDN-hosted files. Visit the http://jquerymobile.com/download/[jQuery Mobile Download] page for the up-to-date URLs.

In our code samples we'll be adding the following code snippets, which in gzipped format will make our application only 90Kb "heavier":

[source, html]
----
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.css" />
<script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
<script src="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.js"></script>
----

=== jQuery.mobile


=== jQuery Mobile Events

* pageinit, not $(document).ready

* pageshow

* pagehide

* tap

TIP: jQuery Mobile makes it very tempting to get buy without writing JavaScript. This may result in a lot of wasted time trying to figure out why the page doesn't work as expected or even loaded. If the code base is not overly large, load your JavaScript to process all the pages first. Then create a listener at the document root to handle pageinit, pageshow, and pagehide events.


=== The structure of a jQuery Mobile code

The jQuery Mobile UI consists of a set of HTML documents where certain attributes are added to the regular HTML components. Your Web application will consists of _pages_, and the user's mobile device will show one page at a time. After the mockup of your application is ready (see section "Prototyping with Balsamiq Mockups" below), you know how many pages your application will have and how to navigate between the pages. Let's see how to define the content of each page in jQuery Mobile.

HTML5 specification includes an important feature - you can add to any HTML tag any number of http://bit.ly/9Udecy[custom non-visible attributes] as long as they start with `data-` and have at least one character after the hyphen. In jQuery Mobile this feature is being used in a very smart way. For example, you can add an attribute `data-role` to the HTML tag `<div>` to specify that it's a page with id `Stats`:

[source, html]
----
<div data-role="page" id="Stats">
----

The UI of your application will consist of multiple pages, but what's important, jQuery Mobile will show them _one page at a time_. Let's say your application consists of two pages (Stats and Donate), then HTML may be structured as follows:

[source,html]
----
    <body> 
    <!--  Page 1    -->	
		<div data-role="page" id="Donate">
			...
		</div>

	 <!--  Page 2    -->		
		<div data-role="page" id="Stats">
			...
		</div>
	</body>		
----

When this application starts, the user will see only the content of the page Donate since it was included in the code first. We'll talk about defining navigation a bit later. 

NOTE: The above code fragment is an example of a _multi-page template_, where a single HTML document contains multiple pages. An alternative way of organizing the code is to have the content of each page in a separate file or a _single-page template_, and you'll see the example later in this chapter.

Let's say you want a page to be divided into the header, content and the footer. Then you can specify the corresponding roles to each of these sections.  

[source,html]
----
    <body> 
    <!--  Page 1    -->
		<div data-role="page" id="Donate">

		  <div data-role="header" >...</div>
		  <div data-role="content" >...</div>
		  <div data-role="footer" >...</div>

		</div>	

    <!--  Page 2    -->
		<div data-role="page" id="Stats">
			...
		</div>
	</body>		
----

It's not a must to split the page with the data roles header, content, and footer. But if you do, the code will be better structured and additional styling can be applied in the CSS based on these attributes.

NOTE: It would be a good idea to replace three `<div>` tags inside the Donate page with HTML5 tags `<header>`, `<article>`, and `<footer>` but during the learning stage this could have confuse you mixing up HTML5 `<header>` and jQuery Mobile data role `header` (the footer line might have looked confusion too).  

Let's say you want to add navigation controls to the header of the page. You can add to the header a container with a `data-role="navbar"`. In the following code sample we'll use the menus from the Save Sick Child application. 

[source, html]
----
<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
   <link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.css"/>
 </head>
 <body>
		
  <div data-role="page">
   <div data-role="header">
  	<h1>Donate</h1>
  	<div data-role="navbar">
  	  <ul>
  	  	<li>
  	  		<a href="#Who-We-Are">Who We Are</a>
  	  	</li>
  	  	<li>
  	  		<a href="#What-We-Do">What We Do</a>
  	  	</li>
  	  	<li>
  	  		<a href="#Where-We-Work">Where We Work</a>
  	  	</li>
  	  	<li>
  	  		<a href="#Way-To-Give">Way To Give</a>
  	  	</li>
  	  </ul>
  	</div>
   </div> <!-- header -->
  
  <div data-role="content" >
      The content goes here
  </div>
  
  <div data-role="footer" >  
    The footer goes here
  </div>  
		
  <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.js"></script>
 </body>
</html>	
----

We'll explain the meaning of the HTML anchror tags in the section "Adding Page Navigation below". Note the The `<viewport>` tag in the above example. It instructs the browser of the mobile device to render the content to a virtual window that has to be the same as the width of the device's screen. Otherwise the mobile browser may assume that it's a Web site for desktop browsers and will minimize the content of the Web site so the user would need to zoom out. Read more about it in the sidebar titled "The Viewport Concept" in Chapter 11.

TIP: You can find the list of all available data attributes in the http://jquerymobile.com/demos/1.2.1/docs/api/data-attributes.html[Data attribute reference] of the online documentation.

The above code sample is a complete HTML document that you can test in your browser. If you'll do it in your desktop Web browser, the Web page will look as in <<FIG12-2>>.

[[FIG12-2]]
.Viewing the document in Firefox
image::images/fig_12_02.png[]

=== How it'll Look on Mobile Device?

Any mobile Web developer wants to see how his Web application will look on mobile devices. There two major ways of doing this: either test it on a real device or use a software emulator or simulator. Let's talk about the emulators - there are plenty of them available.

For example, you can use one of the handy tools like Ripple Emulator. This Chrome browser's extension will add a green icon on the right side of the browser's toolbar - click on it and enable Ripple to run in a Web Mobile default mode. Then select the mobile device from the dropdown on the left and copy/paste the URL of your HTML document into Chrome browser's address bar. <<FIG12-3>> shows how our HTML document would look on Nokia97/5800 mobile phone.

NOTE: There are emulators that are targeting specific platform. For example, you can consider http://developer.android.com/tools/help/emulator.html[Android Emulator] or use iOS simulator that comes with Apple's Xcode IDE. For Nokia emulators browse their http://www.developer.nokia.com/search/simple/?s=x&view=ebs&box=1&k=emulator[developer's forum]. Blackberry simulators are http://us.blackberry.com/sites/developers/resources/simulators.html[here]. Microsoft also offers http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff402563(v=vs.105).aspx[an emulator] for their phones. You can more detailed list of various emulators and simulators in the O'Reilly book "Programming the Mobile Web, 2nd Edition" by Maximiliano Firtman.


[[FIG12-3]]
.Viewing the document in Ripple Emulator
image::images/fig_12_03.png[]

Using emulators really helps in the development. Ripple emulates not only the screen resolutions, but some of the hardware features as well (simulators usually simulate only the software). For example, you can test accelerometer by changing the device position via drag and drop or test the GEO Location on selected device.  But keep in mind that emulators run in in your desktop browser, which may render the UI not exactly the same way as a mobile browser running on the user's mobile phone, for example the fonts may look a little different. Hence testing your application on a real device is highly recommended even though it's impossible to test your Web application on thousands different devices people use. 

If you can afford, hire real mobile users carrying different devices. You can do it at http://www.mob4hire.com/[Mob4Hire] testing as service (TaaS) Web site. The good news is that creators of jQuery Mobile use about http://www.flickr.com/photos/filamentgroup/sets/72157625318352332/[70 physical devices] for testing of their UI components, but still, you may want to see how your application looks and feels on a variety devices.

If you want to see how your application looks on a real device that you own, the easiest way is to deploy your application on a Web server with a static IP address or a dedicated domain name. After the code is modifies, you need to transfer the code to that remote server and enter its URL in the address bar of your mobile device browser.

If you're developing for iOS on MAC OS X computer, the procedure is even easier if both devices are on the same Wi-Fi network. Connect your iOS device to your MAC computer via the USB input. In computer's System Preferences click on Networks and select your Wi-Fi connection on the left - you'll see the IP address of your computer on the right, e.g. 192.168.0.1. If your application is deployed under the local Web server, you can reach it from your iOS device by entering in its browser the URL of your application using the IP address of your computer, e.g. http://192.168.0.1/myApp/index.html. For details, read http://yakovfain.com/2013/06/19/hack-iphone-usb-macbook-web-server/[this blog].


==== Styling in jQuery Mobile

You may not like the design of the navigation bar shown on <<FIG12-2>>, but it has some style applied to it. Where the white letters on the black background are coming from? It happens because we've included the `data-role="navbar"` in the code. This is the power of the the custom `data-` attributes in action. Creators of the jQuery mobile included into their CSS predefined styling for different `data-` attributes including the inner buttons of the `navbar`.  

What if you don't like this default styling? Create your own CSS, but first see if you might like some of the themes offered by jQuery Mobile off the shelf. You can have up to 26 pre-styled sets of toolbars, content and button colors called _swatches_. In the  code you'll referr them as themes lettered from A to Z.  Adding the `data-theme="a"` to the `<div data-role="page` will make change the look of the entire page. 

By default, the header and the footer use swatch "a", and the content area - swatch "c". To change the entire color scheme of <<FIG12-3>> to swatch "a" (the background of the content area will become dark gray) use the following line:

[source, javascript]
----
  <div data-role="page" data-theme="a">
----

jQuery mobile has a tool http://jquerymobile.com/themeroller/[ThemeRoller] that allows you to create a unique combination of colors, fonts, backgrounds and shadows and assign it to one of the letters of the English alphabet (see <<FIG12-4>>). 


[[FIG12-4]]
.Theme Roller
image::images/fig_12_04.png[]

You can learn about creating custom themes with ThemeRoller by visiting http://learn.jquery.com/jquery-mobile/theme-roller/[this URL].

==== Adding Page Navigation

In jQuery Mobile page navigation is defined by using the HTML anchor tag `<a href="">`, where the `href` attribute can either points at page defined as a section in the same HTML document or at a paged defined in a separate HTML document. Accordingly, you can say that that we're using either a _multi-page template_ or a _single-page template_. 


===== Multi-Page Template

With multi-page template each page is a `<div>` (or other HTML container) with an id, and  the `href` attribute responsible for navigation will include the hash tag followed by the corresponding id.  

[source,html]
----
    <body> 
    <!--  Page 1    -->	
		<div data-role="page" id="Donate" data-theme="e">
			<h1>Donate</h1>

			<a href="#Stats">Show Stats</a> 
		</div>

	 <!--  Page 2    -->		
		<div data-role="page" id="Stats">
			<h1>Statistics<h1>
		</div>
	</body>		
----

If you use multi-page document, the ID of the page with a hash (#) will be added to the URL. For example, if the name of the above document is navigation1.html, when the Stats page is open the browser's URL may look like this:

_http://127.0.0.1:8020/navigation1.html#Stats_

Let's say that the only way to navigate from the Stats page is to go back to the page Donate. Now we'll turn the above code fragment into a working 2-page document with the Back button support. Both pages in the following HTML document have a designated areas with the `data-role="header"`, and the Stats page has yet another custom property `data-add-back-btn="true"`. This is all it takes to ensure that the button Back is displayed in the left side of the page header and when the user will _tap_ on it the application will navigate to the Donate page.

[source, html]
----
<!DOCTYPE html>
<html>
 <head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.css"/>
 </head>
<body> 
    <!--  Page 1    -->	
 	  <div data-role="page" id="Donate">
 	  	<div data-role="header" >
 	  	  <h1>Donate</h1>
          </div> 
 	  	<a href="#Stats">Show Stats</a> 
 	  </div>

	 <!--  Page 2    -->		
       <div data-role="page" id="Stats" data-add-back-btn="true">
       	<div data-role="header" >
       	  <h1>Statistics</h1>
           </div>
           Statistics will go here
            
       </div>

  <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.js"></script>

  </body>
</html>	
----

<<FIG12-5>> shows a snapshot of the Ripple emulator after the user clicked on the link on the Donate page. The Statistics page now includes the fully functional Back button.

[[FIG12-5]]
.The Stats page with the Back button
image::images/fig_12_05.png[]

NOTE: Even though we've included the sample of the `data-add-back-btn` in the multi-page template section, it works the same way in single-page template too.

===== Single-Page Template

Now let's re-arrange the code of the above sample using a single-page template. We'll create a folder pages, which can contain multiple HTML files - one per page. In our case, we'll create there one file stats.html to represent the Statistics page. Accordingly, we'll remove the section marked as Page 2 from the main HTML file. The stats.html will look as follows:

[source, html]
----
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
	</head>
	<body>
		<div data-role="page" data-add-back-btn="true">
			<div data-role="header">
			  <h1>Statistics</h1>
            </div>
            Statistics will go here     
		</div>
  </body>
</html>	
----

The main HTML file will contain only one home page, which is a Donate page in this example. The anchor tag will simply refer to the URL of the stats.html - there is no need to use hash tags or section ID any longer. In his case jQuery Mobile will load the stats.html using internal AJAX request. This is how the main page will look like:

[source, html]
----
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.css" />
	</head>
<body> 
    <!--  Main page  -->	
		<div data-role="page" id="Donate">
			<div data-role="header">
			  <h1>Donate</h1>
            </div>

    <!--  A Link to the second page  -->
			<a href="pages/stats.html">Show Stats</a> 
		</div>
	
  <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.js"></script>

  </body>
</html>	
----

Running this version of our simple two-page application will produce the same results and the second page will look exactly as in <<FIG12-5>>.

If you use single-page documents, the name of the file with the  page will be added to the URL. For example, when the Stats page is open the browser's URL may look like this:

_http://127.0.0.1:8020/pages/stats.html_

//Since in a single-page mode jQuery Mobile uses AJAX to load pages, make sure that if these pages use some custom CSS files they are pre-loaded on the application start otherwise you'll lose the styling.


.Progressive enhancements and intrusiveness
*****
Web developers use technique called _progressive enhancement_, especially in the mobile field. The idea is simple - first make sure that the basic functionality works in any browser, and then apply bells and whistles to make the application as fancy as possible using CSS and or framework-specific enhancements. 

Now let's delete `<script>` and `<link>` tags from the above html file and open it in the Web browser - we are testing a situation when, for whatever reason, we need to remove the jQuery Mobile from our code base. The code still works! You'll see the first page, clicking on the link will open the second page. You'll lose the styling and that nice-looking Back button, but you can still use the browser's Back button.  The Web browser ignores custom `data-` attributes without breaking anything.

This wouldn't be the case if we'd be using the multi-page template, where each page is a `<div>` or an `<article>` in the same HTML file. With multi-page template the Web browser would open all pages at once - one under another. 

Here's another example. With jQuery Mobile the following anchor link will look as a nice and easy to click button:

[source, html]
----
<a data-role="button" href="http://cnn.com">CNN</a>
----

Remove jQuery Mobile, and the above line will still work as a standard HTML link.

When you're making a decision about using any particular framework or library, ask yourself a question, "How easy it is to remove the framework from the application code if it doesn't deliver as expected". On multiple occasions the authors of this book were invited to help with the project, where the first task was removal of a wrongly-selected framework from the application code. Such surgery usually lasts at least two weeks. jQuery Mobile is non-intrusive and is easily removable.
*****

==== Persistent Toolbars

One of the ways to arrange navigation is to add persistent toolbars that never go away while your application is running. You can dd such a toolbar in the footer or header area or in both. We'll create a simple example illustrating this technique by adding a a `navbar` to the footer area of the application.  Let's say, your application has a starting page and four other pages that can be selected by the user. <<FIG12-6>>. shows initial view of the application.

[[FIG12-6]]
.Four pages in the footer
image::images/fig_12_06.png[]

If the user taps on one of the four pages in the footer, the program has to replace the starting page with the selected one, and the title of the selected page in the footer has to be highlighted. If you're reading the electronic version of this book you'll see in <<FIG12-7>> that the rectangular area for Page #2 in the footer got the blue background. In the printed version of the book the different the background colors may not so obvious, but you have to trust us on this or run the code sample on your own. Besides, we'll be highlighting the selected page in a similar way while working on the prototype of the Save Sick Child application as per the mockups shown in the section "Prototyping Mobile Version". 

[[FIG12-7]]
.Page 2 is selected
image::images/fig_12_07.png[]

In jQuery Mobile implementing persistent toolbars is simple. The content of each of the page has to be located in a separate file and each of them has to have the footer and header with _the same_ `data_id`. Below is the code of the file page2.html, but page1, page3, and page 4 will look similar.   

[source, html]
----
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
  </head>
  <body>
    <div data-role="page" data-add-back-btn="true">
      <div data-role="header" data-position="fixed" 
           data-tap-toggle="false" data-id="persistent-header">
        <h1>Page #2</h1>
      </div><!-- /header -->
      <div data-role="content" >
        <p>
          <b>Page #2</b> content
        </p>
      </div><!-- /content -->
      <div data-role="footer" data-position="fixed" 
         data-tap-toggle="false" data-id="persistent-footer"> // <1>
        <div data-role="navbar">
          <ul>
            <li>
              <a href="page-1.html" data-transition="slideup">Page #1</a>   // <2>
            </li>
            <li>
              <a href="#" class="ui-state-persist">Page #2</a> // <3>
            </li>
            <li>
              <a href="page-3.html" data-transition="slideup">Page #3</a>
            </li>
            <li>
              <a href="page-4.html" data-transition="slideup">Page #4</a>
            </li>
          </ul>
        </div><!-- /navbar -->
      </div><!-- /footer -->
    </div><!-- /page -->
  </body>
</html>
----

<1> The footer of page1, page2, page3, and page4 will have the same `data-id="persistent-footer"`.

<2> While replacing the current page with another one, apply the transition effect so the page appears by sliding from the bottom up: `data-transition="slideup"`.

<3> Since the Page 2 is already shown on the screen, tapping on the button "Page #2" in the navigation bar should not change the page, hence `href="#"`. The `class="ui-state-persist"` makes the framework to restore the active state each time when the existing in the DOM page is shown. The file page3.html will have a similar anchor for the button "Page #3" and so on.

The code of the main page index.html is shown below:

[source, html]
----
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1,
        user-scalable=no,maximum-scale=1">
    <title>Single-page template - start page</title>
    <link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.css" />
  </head>
  <body>
    <!-- Start page -->
    <div data-role="page">
      <div data-role="header" data-position="fixed" 
            data-tap-toggle="false" data-id="persistent-header">
        <h1>Start page</h1>
      </div><!-- /header -->
      <div data-role="content" >
        <p>
          Single Page template. Start page content.
        </p>
      </div><!-- /content -->
      <div data-role="footer" data-position="fixed" 
            data-tap-toggle="false" data-id="persistent-footer">
        <div data-role="navbar">
          <ul>
            <li>
              <a href="pages/page-1.html" data-transition="slideup">Page #1</a>
            </li>
            <li>
              <a href="pages/page-2.html" data-transition="slideup">Page #2</a>
            </li>
            <li>
              <a href="pages/page-3.html" data-transition="slideup">Page #3</a>
            </li>
            <li>
              <a href="pages/page-4.html" data-transition="slideup">Page #4</a>
            </li>
          </ul>
        </div><!-- /navbar -->
      </div><!-- /footer -->
    </div><!-- /page -->

    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
    <script src="http://code.jquery.com/mobile/1.3.1/jquery.mobile-1.3.1.min.js"></script>
  </body>
</html>
----

TIP: To avoid repeating the same footer in each HTML page, you may write a JavaScript function that will append the footer to each page on the `pagecreate` event.

===== Programmatic Navigation

Code samples above were illustration page navigation as a response to the user's action. Sometimes you need to change pages programmatically as a result of certain event, and the method http://api.jquerymobile.com/jQuery.mobile.changePage/[`$.mobile.changePage()`] can do this. 

This method requires at least one parameter - the string defining the change-to-page, for example:

[source, javascript]
----
$.mobile.changePage("pages/stats.html");
----

But you can also invoke this method with a second parameter, which is an object, where you can specify such parameters as `data` - the data to send with AJAX page request, `changeHash` - a boolean to control if the hash in the URL should be updated and some others. For example, the following code sample changes the page using post request (`type: "post"`) and the the new page should replace the current page in the browser's history (`changeHash: false`).

[source, javascript]
----
$.mobile.changePage("pages/stats.html", {
	type: "post",
	changeHash: false
});
---- 


=== Save Sick Child with jQuery Mobile

After the brief introduction to jQuery Mobile library we (and you) are eager to start hands-on coding. The mobile version of the Save Sick Child  won't show all the features of this application. It'll be sliced into a set of screens (pages), and the user will see one page at a time. 

==== Prototyping Mobile Version

It's time to go back to Jerry, the designer and his favorite prototyping tool Balsamiq Mockups introduced in Chapter 3. Designs and layouts for each screen of the mobile version are shown below as one of the images taken from Balsamiq tool. This is not a complete set of images as it doesn't include layouts for tablets. 
In this book we will test only the mobile devices with screen sizes of 640x960 and 320x480 pixels. 

[[FIG12-10]]
.The Starting page (portrait)
image::images/fig_12_10.png[]


[[FIG12-11]]
.The About page (portrait)
image::images/fig_12_11.png[]

[[FIG12-12]]
.The Who We Are section of About page (portrait)
image::images/fig_12_12.png[]

[[FIG12-13]]
.The Donate page (portrait)
image::images/fig_12_13.png[]

The small screen version of the above Donate page illustrates a term _Above the Fold_ used by Web designers. This term originated in the newspaper business where the first half of the folded newspaper contained the most important headlines - something that the potential buyer would notice immediately. In Web design the _Above the Fold_ means the first page that the user can see without the need to scroll. But if with newspapers people know that there is something to read below the fold, in Web design people may not know that the scrolling could reveal more information. In this particular case, there is a chance that a user with a 320x480 screen may not immediately understand that to see the Donate he needs to scroll. 

In general, it's a good idea to minimize the number of form fields that the user must manually fill out. Invest into analyzing the forms used in your application. See you can design the form smarter: auto-populate some of the fields and show/hide fields based on the user's inputs.   

TIP: If you have a long form that has to be shown on a small screen, split it into several `<div data-role="page">` sections all located inside the `<form>` tag. Arrange the navigation between these sections as it was done for for multi-page documents in the section "Adding Page Navigation" above.


[[FIG12-14]]
.The Statistics page (portrait)
image::images/fig_12_14.png[]

[[FIG12-15]]
.The Events page (portrait)
image::images/fig_12_15.png[]

[[FIG12-16]]
.The Media page (portrait)
image::images/fig_12_16.png[]

[[FIG12-17]]
.The Share page (portrait)
image::images/fig_12_17.png[]

[[FIG12-18]]
.The Share/Photo page for Chapter 14 (portrait)
image::images/fig_12_18.png[]

[[FIG12-19]]
.The Login popup (portrait)
image::images/fig_12_19.png[]

[[FIG12-20]]
.After the user logged in
image::images/fig_12_20.png[]

This prototype will be used for the developing both jQuery Mobile and Sencha Touch versions of our Save Sick Child application. We've also included the design for the page that will integrate with the photo camera of the device (see <<FIG12-18>>) - this functionality will be implemented in the last chapter dedicated to hybrid applications. 

All of the above images show UI layouts when the mobile device is in portrait mode, but you should ask your Web designer to prepare the mockups for landscape mode too. Below are the couple of snapshots prepared by our Web designer Jerry.

[[FIG12-21]]
.The Donate page (landscape, 640x960)
image::images/fig_12_21.png[]

[[FIG12-22]]
.The Donate page (landscape, 320x480)
image::images/fig_12_22.png[]

[[FIG12-23]]
.The Statistics page (landscape, 640x960)
image::images/fig_12_23.png[]

[[FIG12-24]]
.The Statistics page (landscape, 320x480)
image::images/fig_12_24.png[]

TIP: If you want to add a link that will offer to dial a phone number, use the `tel:` scheme, for example: `<a href="tel:+12125551212">Call us</a>`. If you want the phone to look like a button, add the attribute `data-role="button"` to the anchor tag.

=== Summary

In this chapter you've got familiar with a simple to use non-intrusive mobile framework.

